//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Diagnostics.CodeAnalysis;


namespace Fluent_Launcher
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
        private global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace Fluent_Launcher.Fluent_Launcher_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;
        
        private void InitTypeTables()
        {
            _typeNameTable = new string[112];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "Microsoft.UI.Xaml.Thickness";
            _typeNameTable[5] = "System.ValueType";
            _typeNameTable[6] = "Double";
            _typeNameTable[7] = "Windows.UI.Color";
            _typeNameTable[8] = "Byte";
            _typeNameTable[9] = "Fluent_Launcher.Assets.Class.VisibilityConverter";
            _typeNameTable[10] = "Fluent_Launcher.Assets.Class.TextWrappingConverter";
            _typeNameTable[11] = "Fluent_Launcher.Assets.Class.InstanceIdConverter";
            _typeNameTable[12] = "Fluent_Launcher.Assets.Class.MBToGBConverter";
            _typeNameTable[13] = "Fluent_Launcher.Assets.Class.TextBoolConverter";
            _typeNameTable[14] = "Fluent_Launcher.Assets.Class.LoginTypeToIndexConverter";
            _typeNameTable[15] = "Fluent_Launcher.Assets.Pages.Download.Page_DownloadMod";
            _typeNameTable[16] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[17] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[18] = "Microsoft.UI.Xaml.Controls.ScrollView";
            _typeNameTable[19] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[20] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[21] = "Microsoft.UI.Xaml.Visibility";
            _typeNameTable[22] = "Microsoft.UI.Xaml.Controls.ScrollingScrollMode";
            _typeNameTable[23] = "System.Enum";
            _typeNameTable[24] = "Microsoft.UI.Xaml.Controls.ScrollingContentOrientation";
            _typeNameTable[25] = "Microsoft.UI.Composition.CompositionPropertySet";
            _typeNameTable[26] = "Microsoft.UI.Composition.CompositionObject";
            _typeNameTable[27] = "Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility";
            _typeNameTable[28] = "Microsoft.UI.Xaml.Controls.ScrollingChainMode";
            _typeNameTable[29] = "Microsoft.UI.Xaml.Controls.ScrollingRailMode";
            _typeNameTable[30] = "Microsoft.UI.Xaml.Controls.ScrollingInputKinds";
            _typeNameTable[31] = "Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter";
            _typeNameTable[32] = "Microsoft.UI.Xaml.FrameworkElement";
            _typeNameTable[33] = "Microsoft.UI.Xaml.Controls.ScrollingInteractionState";
            _typeNameTable[34] = "Single";
            _typeNameTable[35] = "Microsoft.UI.Xaml.Controls.ScrollingZoomMode";
            _typeNameTable[36] = "Microsoft.UI.Xaml.Controls.ProgressBar";
            _typeNameTable[37] = "Microsoft.UI.Xaml.Controls.Primitives.RangeBase";
            _typeNameTable[38] = "Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings";
            _typeNameTable[39] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[40] = "Microsoft.UI.Xaml.Controls.ItemsView";
            _typeNameTable[41] = "Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode";
            _typeNameTable[42] = "Microsoft.UI.Xaml.Controls.Layout";
            _typeNameTable[43] = "Microsoft.UI.Xaml.IElementFactory";
            _typeNameTable[44] = "Int32";
            _typeNameTable[45] = "Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider";
            _typeNameTable[46] = "System.Collections.Generic.IReadOnlyList`1<Object>";
            _typeNameTable[47] = "Microsoft.UI.Xaml.Controls.Primitives.IScrollController";
            _typeNameTable[48] = "Microsoft.UI.Xaml.Controls.UniformGridLayout";
            _typeNameTable[49] = "Microsoft.UI.Xaml.Controls.VirtualizingLayout";
            _typeNameTable[50] = "Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch";
            _typeNameTable[51] = "Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification";
            _typeNameTable[52] = "Microsoft.UI.Xaml.Controls.Orientation";
            _typeNameTable[53] = "Microsoft.UI.Xaml.Controls.IndexBasedLayoutOrientation";
            _typeNameTable[54] = "Microsoft.UI.Xaml.Controls.ItemContainer";
            _typeNameTable[55] = "CommunityToolkit.WinUI.Controls.SettingsExpander";
            _typeNameTable[56] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[57] = "Microsoft.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[58] = "Microsoft.UI.Xaml.Controls.IconElement";
            _typeNameTable[59] = "CommunityToolkit.WinUI.Controls.SettingsCard";
            _typeNameTable[60] = "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase";
            _typeNameTable[61] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[62] = "String";
            _typeNameTable[63] = "CommunityToolkit.WinUI.Controls.ContentAlignment";
            _typeNameTable[64] = "Fluent_Launcher.Assets.Pages.Download.Page_InstanceOption";
            _typeNameTable[65] = "Fluent_Launcher.Assets.Pages.Download.Page_InstancesList";
            _typeNameTable[66] = "Microsoft.UI.Xaml.Controls.InfoBar";
            _typeNameTable[67] = "Microsoft.UI.Xaml.Controls.InfoBarSeverity";
            _typeNameTable[68] = "System.Windows.Input.ICommand";
            _typeNameTable[69] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[70] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[71] = "Microsoft.UI.Xaml.Controls.IconSource";
            _typeNameTable[72] = "Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings";
            _typeNameTable[73] = "Fluent_Launcher.Assets.Pages.Page_Home";
            _typeNameTable[74] = "Microsoft.UI.Xaml.Controls.Expander";
            _typeNameTable[75] = "Microsoft.UI.Xaml.Controls.ExpandDirection";
            _typeNameTable[76] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[77] = "Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings";
            _typeNameTable[78] = "CommunityToolkit.WinUI.FontIconExtension";
            _typeNameTable[79] = "CommunityToolkit.WinUI.TextIconExtension";
            _typeNameTable[80] = "Microsoft.UI.Xaml.Markup.MarkupExtension";
            _typeNameTable[81] = "Microsoft.UI.Xaml.Media.FontFamily";
            _typeNameTable[82] = "Windows.UI.Text.FontWeight";
            _typeNameTable[83] = "Windows.UI.Text.FontStyle";
            _typeNameTable[84] = "Microsoft.UI.Xaml.Media.Brush";
            _typeNameTable[85] = "Microsoft.UI.Xaml.Controls.RadioButtons";
            _typeNameTable[86] = "Microsoft.UI.Xaml.Controls.LinedFlowLayout";
            _typeNameTable[87] = "Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsStretch";
            _typeNameTable[88] = "Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification";
            _typeNameTable[89] = "Fluent_Launcher.Assets.Pages.Home.Page_InstanceOption";
            _typeNameTable[90] = "Fluent_Launcher.Assets.Pages.Home.Page_PlayerOptionsDialog";
            _typeNameTable[91] = "Fluent_Launcher.Assets.Pages.Home.Page_SelectInstance";
            _typeNameTable[92] = "Microsoft.UI.Xaml.Media.DesktopAcrylicBackdrop";
            _typeNameTable[93] = "Microsoft.UI.Xaml.Media.SystemBackdrop";
            _typeNameTable[94] = "Microsoft.UI.Xaml.Controls.NavigationView";
            _typeNameTable[95] = "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode";
            _typeNameTable[96] = "Microsoft.UI.Xaml.Controls.AutoSuggestBox";
            _typeNameTable[97] = "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode";
            _typeNameTable[98] = "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible";
            _typeNameTable[99] = "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode";
            _typeNameTable[100] = "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus";
            _typeNameTable[101] = "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled";
            _typeNameTable[102] = "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings";
            _typeNameTable[103] = "Microsoft.UI.Xaml.Controls.BreadcrumbBar";
            _typeNameTable[104] = "Microsoft.UI.Xaml.Controls.NavigationViewItem";
            _typeNameTable[105] = "Microsoft.UI.Xaml.Controls.NavigationViewItemBase";
            _typeNameTable[106] = "Microsoft.UI.Xaml.Controls.InfoBadge";
            _typeNameTable[107] = "Microsoft.UI.Xaml.Controls.NavigationViewItemHeader";
            _typeNameTable[108] = "Fluent_Launcher.MainWindow";
            _typeNameTable[109] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[110] = "Microsoft.UI.Xaml.Controls.TreeViewNode";
            _typeNameTable[111] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>";

            _typeTable = new global::System.Type[112];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::Microsoft.UI.Xaml.Thickness);
            _typeTable[5] = typeof(global::System.ValueType);
            _typeTable[6] = typeof(global::System.Double);
            _typeTable[7] = typeof(global::Windows.UI.Color);
            _typeTable[8] = typeof(global::System.Byte);
            _typeTable[9] = typeof(global::Fluent_Launcher.Assets.Class.VisibilityConverter);
            _typeTable[10] = typeof(global::Fluent_Launcher.Assets.Class.TextWrappingConverter);
            _typeTable[11] = typeof(global::Fluent_Launcher.Assets.Class.InstanceIdConverter);
            _typeTable[12] = typeof(global::Fluent_Launcher.Assets.Class.MBToGBConverter);
            _typeTable[13] = typeof(global::Fluent_Launcher.Assets.Class.TextBoolConverter);
            _typeTable[14] = typeof(global::Fluent_Launcher.Assets.Class.LoginTypeToIndexConverter);
            _typeTable[15] = typeof(global::Fluent_Launcher.Assets.Pages.Download.Page_DownloadMod);
            _typeTable[16] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[17] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[18] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollView);
            _typeTable[19] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[20] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[21] = typeof(global::Microsoft.UI.Xaml.Visibility);
            _typeTable[22] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode);
            _typeTable[23] = typeof(global::System.Enum);
            _typeTable[24] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation);
            _typeTable[25] = typeof(global::Microsoft.UI.Composition.CompositionPropertySet);
            _typeTable[26] = typeof(global::Microsoft.UI.Composition.CompositionObject);
            _typeTable[27] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility);
            _typeTable[28] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingChainMode);
            _typeTable[29] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingRailMode);
            _typeTable[30] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds);
            _typeTable[31] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter);
            _typeTable[32] = typeof(global::Microsoft.UI.Xaml.FrameworkElement);
            _typeTable[33] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState);
            _typeTable[34] = typeof(global::System.Single);
            _typeTable[35] = typeof(global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode);
            _typeTable[36] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressBar);
            _typeTable[37] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.RangeBase);
            _typeTable[38] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings);
            _typeTable[39] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[40] = typeof(global::Microsoft.UI.Xaml.Controls.ItemsView);
            _typeTable[41] = typeof(global::Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode);
            _typeTable[42] = typeof(global::Microsoft.UI.Xaml.Controls.Layout);
            _typeTable[43] = typeof(global::Microsoft.UI.Xaml.IElementFactory);
            _typeTable[44] = typeof(global::System.Int32);
            _typeTable[45] = typeof(global::Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider);
            _typeTable[46] = typeof(global::System.Collections.Generic.IReadOnlyList<global::System.Object>);
            _typeTable[47] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController);
            _typeTable[48] = typeof(global::Microsoft.UI.Xaml.Controls.UniformGridLayout);
            _typeTable[49] = typeof(global::Microsoft.UI.Xaml.Controls.VirtualizingLayout);
            _typeTable[50] = typeof(global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch);
            _typeTable[51] = typeof(global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification);
            _typeTable[52] = typeof(global::Microsoft.UI.Xaml.Controls.Orientation);
            _typeTable[53] = typeof(global::Microsoft.UI.Xaml.Controls.IndexBasedLayoutOrientation);
            _typeTable[54] = typeof(global::Microsoft.UI.Xaml.Controls.ItemContainer);
            _typeTable[55] = typeof(global::CommunityToolkit.WinUI.Controls.SettingsExpander);
            _typeTable[56] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[57] = typeof(global::Microsoft.UI.Xaml.Controls.StyleSelector);
            _typeTable[58] = typeof(global::Microsoft.UI.Xaml.Controls.IconElement);
            _typeTable[59] = typeof(global::CommunityToolkit.WinUI.Controls.SettingsCard);
            _typeTable[60] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase);
            _typeTable[61] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[62] = typeof(global::System.String);
            _typeTable[63] = typeof(global::CommunityToolkit.WinUI.Controls.ContentAlignment);
            _typeTable[64] = typeof(global::Fluent_Launcher.Assets.Pages.Download.Page_InstanceOption);
            _typeTable[65] = typeof(global::Fluent_Launcher.Assets.Pages.Download.Page_InstancesList);
            _typeTable[66] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBar);
            _typeTable[67] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity);
            _typeTable[68] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[69] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[70] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[71] = typeof(global::Microsoft.UI.Xaml.Controls.IconSource);
            _typeTable[72] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings);
            _typeTable[73] = typeof(global::Fluent_Launcher.Assets.Pages.Page_Home);
            _typeTable[74] = typeof(global::Microsoft.UI.Xaml.Controls.Expander);
            _typeTable[75] = typeof(global::Microsoft.UI.Xaml.Controls.ExpandDirection);
            _typeTable[76] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[77] = typeof(global::Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings);
            _typeTable[78] = typeof(global::CommunityToolkit.WinUI.FontIconExtension);
            _typeTable[79] = typeof(global::CommunityToolkit.WinUI.TextIconExtension);
            _typeTable[80] = typeof(global::Microsoft.UI.Xaml.Markup.MarkupExtension);
            _typeTable[81] = typeof(global::Microsoft.UI.Xaml.Media.FontFamily);
            _typeTable[82] = typeof(global::Windows.UI.Text.FontWeight);
            _typeTable[83] = typeof(global::Windows.UI.Text.FontStyle);
            _typeTable[84] = typeof(global::Microsoft.UI.Xaml.Media.Brush);
            _typeTable[85] = typeof(global::Microsoft.UI.Xaml.Controls.RadioButtons);
            _typeTable[86] = typeof(global::Microsoft.UI.Xaml.Controls.LinedFlowLayout);
            _typeTable[87] = typeof(global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsStretch);
            _typeTable[88] = typeof(global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification);
            _typeTable[89] = typeof(global::Fluent_Launcher.Assets.Pages.Home.Page_InstanceOption);
            _typeTable[90] = typeof(global::Fluent_Launcher.Assets.Pages.Home.Page_PlayerOptionsDialog);
            _typeTable[91] = typeof(global::Fluent_Launcher.Assets.Pages.Home.Page_SelectInstance);
            _typeTable[92] = typeof(global::Microsoft.UI.Xaml.Media.DesktopAcrylicBackdrop);
            _typeTable[93] = typeof(global::Microsoft.UI.Xaml.Media.SystemBackdrop);
            _typeTable[94] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationView);
            _typeTable[95] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode);
            _typeTable[96] = typeof(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox);
            _typeTable[97] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode);
            _typeTable[98] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible);
            _typeTable[99] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode);
            _typeTable[100] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus);
            _typeTable[101] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled);
            _typeTable[102] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings);
            _typeTable[103] = typeof(global::Microsoft.UI.Xaml.Controls.BreadcrumbBar);
            _typeTable[104] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItem);
            _typeTable[105] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase);
            _typeTable[106] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBadge);
            _typeTable[107] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemHeader);
            _typeTable[108] = typeof(global::Fluent_Launcher.MainWindow);
            _typeTable[109] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[110] = typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode);
            _typeTable[111] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_9_VisibilityConverter() { return new global::Fluent_Launcher.Assets.Class.VisibilityConverter(); }
        private object Activate_10_TextWrappingConverter() { return new global::Fluent_Launcher.Assets.Class.TextWrappingConverter(); }
        private object Activate_11_InstanceIdConverter() { return new global::Fluent_Launcher.Assets.Class.InstanceIdConverter(); }
        private object Activate_12_MBToGBConverter() { return new global::Fluent_Launcher.Assets.Class.MBToGBConverter(); }
        private object Activate_13_TextBoolConverter() { return new global::Fluent_Launcher.Assets.Class.TextBoolConverter(); }
        private object Activate_14_LoginTypeToIndexConverter() { return new global::Fluent_Launcher.Assets.Class.LoginTypeToIndexConverter(); }
        private object Activate_15_Page_DownloadMod() { return new global::Fluent_Launcher.Assets.Pages.Download.Page_DownloadMod(); }
        private object Activate_18_ScrollView() { return new global::Microsoft.UI.Xaml.Controls.ScrollView(); }
        private object Activate_31_ScrollPresenter() { return new global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter(); }
        private object Activate_36_ProgressBar() { return new global::Microsoft.UI.Xaml.Controls.ProgressBar(); }
        private object Activate_40_ItemsView() { return new global::Microsoft.UI.Xaml.Controls.ItemsView(); }
        private object Activate_45_ItemCollectionTransitionProvider() { return new global::Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider(); }
        private object Activate_48_UniformGridLayout() { return new global::Microsoft.UI.Xaml.Controls.UniformGridLayout(); }
        private object Activate_49_VirtualizingLayout() { return new global::Microsoft.UI.Xaml.Controls.VirtualizingLayout(); }
        private object Activate_54_ItemContainer() { return new global::Microsoft.UI.Xaml.Controls.ItemContainer(); }
        private object Activate_55_SettingsExpander() { return new global::CommunityToolkit.WinUI.Controls.SettingsExpander(); }
        private object Activate_59_SettingsCard() { return new global::CommunityToolkit.WinUI.Controls.SettingsCard(); }
        private object Activate_64_Page_InstanceOption() { return new global::Fluent_Launcher.Assets.Pages.Download.Page_InstanceOption(); }
        private object Activate_65_Page_InstancesList() { return new global::Fluent_Launcher.Assets.Pages.Download.Page_InstancesList(); }
        private object Activate_66_InfoBar() { return new global::Microsoft.UI.Xaml.Controls.InfoBar(); }
        private object Activate_72_InfoBarTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings(); }
        private object Activate_73_Page_Home() { return new global::Fluent_Launcher.Assets.Pages.Page_Home(); }
        private object Activate_74_Expander() { return new global::Microsoft.UI.Xaml.Controls.Expander(); }
        private object Activate_78_FontIconExtension() { return new global::CommunityToolkit.WinUI.FontIconExtension(); }
        private object Activate_85_RadioButtons() { return new global::Microsoft.UI.Xaml.Controls.RadioButtons(); }
        private object Activate_86_LinedFlowLayout() { return new global::Microsoft.UI.Xaml.Controls.LinedFlowLayout(); }
        private object Activate_89_Page_InstanceOption() { return new global::Fluent_Launcher.Assets.Pages.Home.Page_InstanceOption(); }
        private object Activate_90_Page_PlayerOptionsDialog() { return new global::Fluent_Launcher.Assets.Pages.Home.Page_PlayerOptionsDialog(); }
        private object Activate_91_Page_SelectInstance() { return new global::Fluent_Launcher.Assets.Pages.Home.Page_SelectInstance(); }
        private object Activate_92_DesktopAcrylicBackdrop() { return new global::Microsoft.UI.Xaml.Media.DesktopAcrylicBackdrop(); }
        private object Activate_94_NavigationView() { return new global::Microsoft.UI.Xaml.Controls.NavigationView(); }
        private object Activate_102_NavigationViewTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings(); }
        private object Activate_103_BreadcrumbBar() { return new global::Microsoft.UI.Xaml.Controls.BreadcrumbBar(); }
        private object Activate_104_NavigationViewItem() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewItem(); }
        private object Activate_106_InfoBadge() { return new global::Microsoft.UI.Xaml.Controls.InfoBadge(); }
        private object Activate_107_NavigationViewItemHeader() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewItemHeader(); }
        private object Activate_108_MainWindow() { return new global::Fluent_Launcher.MainWindow(); }
        private object Activate_110_TreeViewNode() { return new global::Microsoft.UI.Xaml.Controls.TreeViewNode(); }
        private void StaticInitializer_0_XamlControlsResources() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources).TypeHandle);
        private void StaticInitializer_4_Thickness() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Thickness).TypeHandle);
        private void StaticInitializer_5_ValueType() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.ValueType).TypeHandle);
        private void StaticInitializer_7_Color() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Windows.UI.Color).TypeHandle);
        private void StaticInitializer_8_Byte() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Byte).TypeHandle);
        private void StaticInitializer_9_VisibilityConverter() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Class.VisibilityConverter).TypeHandle);
        private void StaticInitializer_10_TextWrappingConverter() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Class.TextWrappingConverter).TypeHandle);
        private void StaticInitializer_11_InstanceIdConverter() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Class.InstanceIdConverter).TypeHandle);
        private void StaticInitializer_12_MBToGBConverter() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Class.MBToGBConverter).TypeHandle);
        private void StaticInitializer_13_TextBoolConverter() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Class.TextBoolConverter).TypeHandle);
        private void StaticInitializer_14_LoginTypeToIndexConverter() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Class.LoginTypeToIndexConverter).TypeHandle);
        private void StaticInitializer_15_Page_DownloadMod() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Pages.Download.Page_DownloadMod).TypeHandle);
        private void StaticInitializer_18_ScrollView() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ScrollView).TypeHandle);
        private void StaticInitializer_22_ScrollingScrollMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode).TypeHandle);
        private void StaticInitializer_23_Enum() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Enum).TypeHandle);
        private void StaticInitializer_24_ScrollingContentOrientation() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation).TypeHandle);
        private void StaticInitializer_25_CompositionPropertySet() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Composition.CompositionPropertySet).TypeHandle);
        private void StaticInitializer_26_CompositionObject() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Composition.CompositionObject).TypeHandle);
        private void StaticInitializer_27_ScrollingScrollBarVisibility() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility).TypeHandle);
        private void StaticInitializer_28_ScrollingChainMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ScrollingChainMode).TypeHandle);
        private void StaticInitializer_29_ScrollingRailMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ScrollingRailMode).TypeHandle);
        private void StaticInitializer_30_ScrollingInputKinds() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds).TypeHandle);
        private void StaticInitializer_31_ScrollPresenter() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter).TypeHandle);
        private void StaticInitializer_33_ScrollingInteractionState() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState).TypeHandle);
        private void StaticInitializer_35_ScrollingZoomMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode).TypeHandle);
        private void StaticInitializer_36_ProgressBar() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ProgressBar).TypeHandle);
        private void StaticInitializer_38_ProgressBarTemplateSettings() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings).TypeHandle);
        private void StaticInitializer_40_ItemsView() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ItemsView).TypeHandle);
        private void StaticInitializer_41_ItemsViewSelectionMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode).TypeHandle);
        private void StaticInitializer_42_Layout() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.Layout).TypeHandle);
        private void StaticInitializer_45_ItemCollectionTransitionProvider() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider).TypeHandle);
        private void StaticInitializer_46_IReadOnlyList() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.Generic.IReadOnlyList<global::System.Object>).TypeHandle);
        private void StaticInitializer_47_IScrollController() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController).TypeHandle);
        private void StaticInitializer_48_UniformGridLayout() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.UniformGridLayout).TypeHandle);
        private void StaticInitializer_49_VirtualizingLayout() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.VirtualizingLayout).TypeHandle);
        private void StaticInitializer_50_UniformGridLayoutItemsStretch() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch).TypeHandle);
        private void StaticInitializer_51_UniformGridLayoutItemsJustification() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification).TypeHandle);
        private void StaticInitializer_53_IndexBasedLayoutOrientation() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.IndexBasedLayoutOrientation).TypeHandle);
        private void StaticInitializer_54_ItemContainer() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ItemContainer).TypeHandle);
        private void StaticInitializer_55_SettingsExpander() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Controls.SettingsExpander).TypeHandle);
        private void StaticInitializer_56_IList() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.Generic.IList<global::System.Object>).TypeHandle);
        private void StaticInitializer_59_SettingsCard() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Controls.SettingsCard).TypeHandle);
        private void StaticInitializer_63_ContentAlignment() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Controls.ContentAlignment).TypeHandle);
        private void StaticInitializer_64_Page_InstanceOption() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Pages.Download.Page_InstanceOption).TypeHandle);
        private void StaticInitializer_65_Page_InstancesList() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Pages.Download.Page_InstancesList).TypeHandle);
        private void StaticInitializer_66_InfoBar() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.InfoBar).TypeHandle);
        private void StaticInitializer_67_InfoBarSeverity() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity).TypeHandle);
        private void StaticInitializer_68_ICommand() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Windows.Input.ICommand).TypeHandle);
        private void StaticInitializer_72_InfoBarTemplateSettings() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings).TypeHandle);
        private void StaticInitializer_73_Page_Home() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Pages.Page_Home).TypeHandle);
        private void StaticInitializer_74_Expander() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.Expander).TypeHandle);
        private void StaticInitializer_75_ExpandDirection() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ExpandDirection).TypeHandle);
        private void StaticInitializer_77_ExpanderTemplateSettings() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings).TypeHandle);
        private void StaticInitializer_78_FontIconExtension() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.FontIconExtension).TypeHandle);
        private void StaticInitializer_79_TextIconExtension() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.TextIconExtension).TypeHandle);
        private void StaticInitializer_82_FontWeight() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Windows.UI.Text.FontWeight).TypeHandle);
        private void StaticInitializer_83_FontStyle() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Windows.UI.Text.FontStyle).TypeHandle);
        private void StaticInitializer_85_RadioButtons() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.RadioButtons).TypeHandle);
        private void StaticInitializer_86_LinedFlowLayout() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.LinedFlowLayout).TypeHandle);
        private void StaticInitializer_87_LinedFlowLayoutItemsStretch() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsStretch).TypeHandle);
        private void StaticInitializer_88_LinedFlowLayoutItemsJustification() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification).TypeHandle);
        private void StaticInitializer_89_Page_InstanceOption() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Pages.Home.Page_InstanceOption).TypeHandle);
        private void StaticInitializer_90_Page_PlayerOptionsDialog() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Pages.Home.Page_PlayerOptionsDialog).TypeHandle);
        private void StaticInitializer_91_Page_SelectInstance() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.Assets.Pages.Home.Page_SelectInstance).TypeHandle);
        private void StaticInitializer_92_DesktopAcrylicBackdrop() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Media.DesktopAcrylicBackdrop).TypeHandle);
        private void StaticInitializer_94_NavigationView() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationView).TypeHandle);
        private void StaticInitializer_95_NavigationViewPaneDisplayMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode).TypeHandle);
        private void StaticInitializer_97_NavigationViewDisplayMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode).TypeHandle);
        private void StaticInitializer_98_NavigationViewBackButtonVisible() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible).TypeHandle);
        private void StaticInitializer_99_NavigationViewOverflowLabelMode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode).TypeHandle);
        private void StaticInitializer_100_NavigationViewSelectionFollowsFocus() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus).TypeHandle);
        private void StaticInitializer_101_NavigationViewShoulderNavigationEnabled() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled).TypeHandle);
        private void StaticInitializer_102_NavigationViewTemplateSettings() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings).TypeHandle);
        private void StaticInitializer_103_BreadcrumbBar() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.BreadcrumbBar).TypeHandle);
        private void StaticInitializer_104_NavigationViewItem() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItem).TypeHandle);
        private void StaticInitializer_105_NavigationViewItemBase() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase).TypeHandle);
        private void StaticInitializer_106_InfoBadge() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.InfoBadge).TypeHandle);
        private void StaticInitializer_107_NavigationViewItemHeader() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemHeader).TypeHandle);
        private void StaticInitializer_108_MainWindow() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Fluent_Launcher.MainWindow).TypeHandle);
        private void StaticInitializer_110_TreeViewNode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode).TypeHandle);
        private void StaticInitializer_111_IList() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>).TypeHandle);
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_56_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_111_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TreeViewNode>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.StaticInitializer = StaticInitializer_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Microsoft.UI.Xaml.Thickness
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_4_Thickness;
                userType.AddMemberName("Left");
                userType.AddMemberName("Top");
                userType.AddMemberName("Right");
                userType.AddMemberName("Bottom");
                xamlType = userType;
                break;

            case 5:   //  System.ValueType
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_5_ValueType;
                xamlType = userType;
                break;

            case 6:   //  Double
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Windows.UI.Color
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_7_Color;
                userType.AddMemberName("A");
                userType.AddMemberName("R");
                userType.AddMemberName("G");
                userType.AddMemberName("B");
                xamlType = userType;
                break;

            case 8:   //  Byte
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_8_Byte;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  Fluent_Launcher.Assets.Class.VisibilityConverter
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_VisibilityConverter;
                userType.StaticInitializer = StaticInitializer_9_VisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Fluent_Launcher.Assets.Class.TextWrappingConverter
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_TextWrappingConverter;
                userType.StaticInitializer = StaticInitializer_10_TextWrappingConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Fluent_Launcher.Assets.Class.InstanceIdConverter
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_InstanceIdConverter;
                userType.StaticInitializer = StaticInitializer_11_InstanceIdConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Fluent_Launcher.Assets.Class.MBToGBConverter
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_12_MBToGBConverter;
                userType.StaticInitializer = StaticInitializer_12_MBToGBConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Fluent_Launcher.Assets.Class.TextBoolConverter
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_TextBoolConverter;
                userType.StaticInitializer = StaticInitializer_13_TextBoolConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  Fluent_Launcher.Assets.Class.LoginTypeToIndexConverter
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_LoginTypeToIndexConverter;
                userType.StaticInitializer = StaticInitializer_14_LoginTypeToIndexConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Fluent_Launcher.Assets.Pages.Download.Page_DownloadMod
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_15_Page_DownloadMod;
                userType.StaticInitializer = StaticInitializer_15_Page_DownloadMod;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Microsoft.UI.Xaml.Controls.ScrollView
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_18_ScrollView;
                userType.StaticInitializer = StaticInitializer_18_ScrollView;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.ScrollView.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("ComputedHorizontalScrollBarVisibility");
                userType.AddMemberName("ComputedHorizontalScrollMode");
                userType.AddMemberName("ComputedVerticalScrollBarVisibility");
                userType.AddMemberName("ComputedVerticalScrollMode");
                userType.AddMemberName("ContentOrientation");
                userType.AddMemberName("CurrentAnchor");
                userType.AddMemberName("ExpressionAnimationSources");
                userType.AddMemberName("ExtentHeight");
                userType.AddMemberName("ExtentWidth");
                userType.AddMemberName("HorizontalAnchorRatio");
                userType.AddMemberName("HorizontalOffset");
                userType.AddMemberName("HorizontalScrollBarVisibility");
                userType.AddMemberName("HorizontalScrollChainMode");
                userType.AddMemberName("HorizontalScrollMode");
                userType.AddMemberName("HorizontalScrollRailMode");
                userType.AddMemberName("IgnoredInputKinds");
                userType.AddMemberName("MaxZoomFactor");
                userType.AddMemberName("MinZoomFactor");
                userType.AddMemberName("ScrollPresenter");
                userType.AddMemberName("ScrollableHeight");
                userType.AddMemberName("ScrollableWidth");
                userType.AddMemberName("State");
                userType.AddMemberName("VerticalAnchorRatio");
                userType.AddMemberName("VerticalOffset");
                userType.AddMemberName("VerticalScrollBarVisibility");
                userType.AddMemberName("VerticalScrollChainMode");
                userType.AddMemberName("VerticalScrollMode");
                userType.AddMemberName("VerticalScrollRailMode");
                userType.AddMemberName("ViewportHeight");
                userType.AddMemberName("ViewportWidth");
                userType.AddMemberName("ZoomChainMode");
                userType.AddMemberName("ZoomFactor");
                userType.AddMemberName("ZoomMode");
                xamlType = userType;
                break;

            case 19:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Microsoft.UI.Xaml.Visibility
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Microsoft.UI.Xaml.Controls.ScrollingScrollMode
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_22_ScrollingScrollMode;
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode.Enabled);
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode.Disabled);
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode.Auto);
                xamlType = userType;
                break;

            case 23:   //  System.Enum
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_23_Enum;
                xamlType = userType;
                break;

            case 24:   //  Microsoft.UI.Xaml.Controls.ScrollingContentOrientation
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_24_ScrollingContentOrientation;
                userType.AddEnumValue("Vertical", global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation.Vertical);
                userType.AddEnumValue("Horizontal", global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation.Horizontal);
                userType.AddEnumValue("None", global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation.None);
                userType.AddEnumValue("Both", global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation.Both);
                xamlType = userType;
                break;

            case 25:   //  Microsoft.UI.Composition.CompositionPropertySet
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Composition.CompositionObject"));
                userType.StaticInitializer = StaticInitializer_25_CompositionPropertySet;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  Microsoft.UI.Composition.CompositionObject
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_26_CompositionObject;
                xamlType = userType;
                break;

            case 27:   //  Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_27_ScrollingScrollBarVisibility;
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility.Auto);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility.Visible);
                userType.AddEnumValue("Hidden", global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility.Hidden);
                xamlType = userType;
                break;

            case 28:   //  Microsoft.UI.Xaml.Controls.ScrollingChainMode
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_28_ScrollingChainMode;
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.ScrollingChainMode.Auto);
                userType.AddEnumValue("Always", global::Microsoft.UI.Xaml.Controls.ScrollingChainMode.Always);
                userType.AddEnumValue("Never", global::Microsoft.UI.Xaml.Controls.ScrollingChainMode.Never);
                xamlType = userType;
                break;

            case 29:   //  Microsoft.UI.Xaml.Controls.ScrollingRailMode
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_29_ScrollingRailMode;
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.ScrollingRailMode.Enabled);
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.ScrollingRailMode.Disabled);
                xamlType = userType;
                break;

            case 30:   //  Microsoft.UI.Xaml.Controls.ScrollingInputKinds
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_30_ScrollingInputKinds;
                userType.AddEnumValue("None", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.None);
                userType.AddEnumValue("Touch", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.Touch);
                userType.AddEnumValue("Pen", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.Pen);
                userType.AddEnumValue("MouseWheel", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.MouseWheel);
                userType.AddEnumValue("Keyboard", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.Keyboard);
                userType.AddEnumValue("Gamepad", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.Gamepad);
                userType.AddEnumValue("All", global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds.All);
                xamlType = userType;
                break;

            case 31:   //  Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.FrameworkElement"));
                userType.StaticInitializer = StaticInitializer_31_ScrollPresenter;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter.Content");
                userType.AddMemberName("Content");
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  Microsoft.UI.Xaml.FrameworkElement
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Microsoft.UI.Xaml.Controls.ScrollingInteractionState
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_33_ScrollingInteractionState;
                userType.AddEnumValue("Idle", global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState.Idle);
                userType.AddEnumValue("Interaction", global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState.Interaction);
                userType.AddEnumValue("Inertia", global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState.Inertia);
                userType.AddEnumValue("Animation", global::Microsoft.UI.Xaml.Controls.ScrollingInteractionState.Animation);
                xamlType = userType;
                break;

            case 34:   //  Single
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  Microsoft.UI.Xaml.Controls.ScrollingZoomMode
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_35_ScrollingZoomMode;
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode.Enabled);
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode.Disabled);
                xamlType = userType;
                break;

            case 36:   //  Microsoft.UI.Xaml.Controls.ProgressBar
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Primitives.RangeBase"));
                userType.Activator = Activate_36_ProgressBar;
                userType.StaticInitializer = StaticInitializer_36_ProgressBar;
                userType.AddMemberName("IsIndeterminate");
                userType.AddMemberName("ShowPaused");
                userType.AddMemberName("ShowError");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 37:   //  Microsoft.UI.Xaml.Controls.Primitives.RangeBase
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.StaticInitializer = StaticInitializer_38_ProgressBarTemplateSettings;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Microsoft.UI.Xaml.Controls.ItemsView
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_40_ItemsView;
                userType.StaticInitializer = StaticInitializer_40_ItemsView;
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("Layout");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("CurrentItemIndex");
                userType.AddMemberName("IsItemInvokedEnabled");
                userType.AddMemberName("ItemTransitionProvider");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ScrollView");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SelectedItems");
                userType.AddMemberName("VerticalScrollController");
                xamlType = userType;
                break;

            case 41:   //  Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_41_ItemsViewSelectionMode;
                userType.AddEnumValue("None", global::Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode.None);
                userType.AddEnumValue("Single", global::Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode.Single);
                userType.AddEnumValue("Multiple", global::Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode.Multiple);
                userType.AddEnumValue("Extended", global::Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode.Extended);
                xamlType = userType;
                break;

            case 42:   //  Microsoft.UI.Xaml.Controls.Layout
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.StaticInitializer = StaticInitializer_42_Layout;
                userType.AddMemberName("IndexBasedLayoutOrientation");
                xamlType = userType;
                break;

            case 43:   //  Microsoft.UI.Xaml.IElementFactory
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Int32
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 45:   //  Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_45_ItemCollectionTransitionProvider;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 46:   //  System.Collections.Generic.IReadOnlyList`1<Object>
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_46_IReadOnlyList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  Microsoft.UI.Xaml.Controls.Primitives.IScrollController
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_47_IScrollController;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 48:   //  Microsoft.UI.Xaml.Controls.UniformGridLayout
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.VirtualizingLayout"));
                userType.Activator = Activate_48_UniformGridLayout;
                userType.StaticInitializer = StaticInitializer_48_UniformGridLayout;
                userType.AddMemberName("ItemsStretch");
                userType.AddMemberName("MinRowSpacing");
                userType.AddMemberName("MinColumnSpacing");
                userType.AddMemberName("MinItemWidth");
                userType.AddMemberName("ItemsJustification");
                userType.AddMemberName("MaximumRowsOrColumns");
                userType.AddMemberName("MinItemHeight");
                userType.AddMemberName("Orientation");
                xamlType = userType;
                break;

            case 49:   //  Microsoft.UI.Xaml.Controls.VirtualizingLayout
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Layout"));
                userType.Activator = Activate_49_VirtualizingLayout;
                userType.StaticInitializer = StaticInitializer_49_VirtualizingLayout;
                xamlType = userType;
                break;

            case 50:   //  Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_50_UniformGridLayoutItemsStretch;
                userType.AddEnumValue("None", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch.None);
                userType.AddEnumValue("Fill", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch.Fill);
                userType.AddEnumValue("Uniform", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch.Uniform);
                xamlType = userType;
                break;

            case 51:   //  Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_51_UniformGridLayoutItemsJustification;
                userType.AddEnumValue("Start", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.Start);
                userType.AddEnumValue("Center", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.Center);
                userType.AddEnumValue("End", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.End);
                userType.AddEnumValue("SpaceAround", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.SpaceAround);
                userType.AddEnumValue("SpaceBetween", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.SpaceBetween);
                userType.AddEnumValue("SpaceEvenly", global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification.SpaceEvenly);
                xamlType = userType;
                break;

            case 52:   //  Microsoft.UI.Xaml.Controls.Orientation
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 53:   //  Microsoft.UI.Xaml.Controls.IndexBasedLayoutOrientation
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_53_IndexBasedLayoutOrientation;
                userType.AddEnumValue("None", global::Microsoft.UI.Xaml.Controls.IndexBasedLayoutOrientation.None);
                userType.AddEnumValue("TopToBottom", global::Microsoft.UI.Xaml.Controls.IndexBasedLayoutOrientation.TopToBottom);
                userType.AddEnumValue("LeftToRight", global::Microsoft.UI.Xaml.Controls.IndexBasedLayoutOrientation.LeftToRight);
                xamlType = userType;
                break;

            case 54:   //  Microsoft.UI.Xaml.Controls.ItemContainer
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_54_ItemContainer;
                userType.StaticInitializer = StaticInitializer_54_ItemContainer;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.ItemContainer.Child");
                userType.AddMemberName("Child");
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 55:   //  CommunityToolkit.WinUI.Controls.SettingsExpander
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_55_SettingsExpander;
                userType.StaticInitializer = StaticInitializer_55_SettingsExpander;
                userType.SetContentPropertyName("CommunityToolkit.WinUI.Controls.SettingsExpander.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Header");
                userType.AddMemberName("Items");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("ItemContainerStyleSelector");
                userType.AddMemberName("Description");
                userType.AddMemberName("HeaderIcon");
                userType.AddMemberName("ItemsHeader");
                userType.AddMemberName("ItemsFooter");
                xamlType = userType;
                break;

            case 56:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_56_IList;
                userType.CollectionAdd = VectorAdd_56_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 57:   //  Microsoft.UI.Xaml.Controls.StyleSelector
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 58:   //  Microsoft.UI.Xaml.Controls.IconElement
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 59:   //  CommunityToolkit.WinUI.Controls.SettingsCard
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Primitives.ButtonBase"));
                userType.Activator = Activate_59_SettingsCard;
                userType.StaticInitializer = StaticInitializer_59_SettingsCard;
                userType.AddMemberName("Header");
                userType.AddMemberName("Description");
                userType.AddMemberName("HeaderIcon");
                userType.AddMemberName("ActionIcon");
                userType.AddMemberName("ActionIconToolTip");
                userType.AddMemberName("IsClickEnabled");
                userType.AddMemberName("ContentAlignment");
                userType.AddMemberName("IsActionIconVisible");
                xamlType = userType;
                break;

            case 60:   //  Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 61:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 62:   //  String
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 63:   //  CommunityToolkit.WinUI.Controls.ContentAlignment
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_63_ContentAlignment;
                userType.AddEnumValue("Right", global::CommunityToolkit.WinUI.Controls.ContentAlignment.Right);
                userType.AddEnumValue("Left", global::CommunityToolkit.WinUI.Controls.ContentAlignment.Left);
                userType.AddEnumValue("Vertical", global::CommunityToolkit.WinUI.Controls.ContentAlignment.Vertical);
                xamlType = userType;
                break;

            case 64:   //  Fluent_Launcher.Assets.Pages.Download.Page_InstanceOption
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_64_Page_InstanceOption;
                userType.StaticInitializer = StaticInitializer_64_Page_InstanceOption;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  Fluent_Launcher.Assets.Pages.Download.Page_InstancesList
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_65_Page_InstancesList;
                userType.StaticInitializer = StaticInitializer_65_Page_InstancesList;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 66:   //  Microsoft.UI.Xaml.Controls.InfoBar
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_66_InfoBar;
                userType.StaticInitializer = StaticInitializer_66_InfoBar;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.InfoBar.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("Severity");
                userType.AddMemberName("ActionButton");
                userType.AddMemberName("CloseButtonCommand");
                userType.AddMemberName("CloseButtonCommandParameter");
                userType.AddMemberName("CloseButtonStyle");
                userType.AddMemberName("ContentTemplate");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("IsClosable");
                userType.AddMemberName("IsIconVisible");
                userType.AddMemberName("Message");
                userType.AddMemberName("TemplateSettings");
                userType.AddMemberName("Title");
                xamlType = userType;
                break;

            case 67:   //  Microsoft.UI.Xaml.Controls.InfoBarSeverity
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_67_InfoBarSeverity;
                userType.AddEnumValue("Informational", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Informational);
                userType.AddEnumValue("Success", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Success);
                userType.AddEnumValue("Warning", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Warning);
                userType.AddEnumValue("Error", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Error);
                xamlType = userType;
                break;

            case 68:   //  System.Windows.Input.ICommand
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_68_ICommand;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 69:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 70:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 71:   //  Microsoft.UI.Xaml.Controls.IconSource
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 72:   //  Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.StaticInitializer = StaticInitializer_72_InfoBarTemplateSettings;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 73:   //  Fluent_Launcher.Assets.Pages.Page_Home
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_73_Page_Home;
                userType.StaticInitializer = StaticInitializer_73_Page_Home;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 74:   //  Microsoft.UI.Xaml.Controls.Expander
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_74_Expander;
                userType.StaticInitializer = StaticInitializer_74_Expander;
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Header");
                userType.AddMemberName("ExpandDirection");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("HeaderTemplateSelector");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 75:   //  Microsoft.UI.Xaml.Controls.ExpandDirection
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_75_ExpandDirection;
                userType.AddEnumValue("Down", global::Microsoft.UI.Xaml.Controls.ExpandDirection.Down);
                userType.AddEnumValue("Up", global::Microsoft.UI.Xaml.Controls.ExpandDirection.Up);
                xamlType = userType;
                break;

            case 76:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 77:   //  Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.StaticInitializer = StaticInitializer_77_ExpanderTemplateSettings;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 78:   //  CommunityToolkit.WinUI.FontIconExtension
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("CommunityToolkit.WinUI.TextIconExtension"));
                userType.Activator = Activate_78_FontIconExtension;
                userType.StaticInitializer = StaticInitializer_78_FontIconExtension;
                userType.AddMemberName("Glyph");
                userType.AddMemberName("FontFamily");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 79:   //  CommunityToolkit.WinUI.TextIconExtension
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Markup.MarkupExtension"));
                userType.StaticInitializer = StaticInitializer_79_TextIconExtension;
                userType.AddMemberName("FontSize");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("IsTextScaleFactorEnabled");
                userType.AddMemberName("MirroredWhenRightToLeft");
                userType.SetIsMarkupExtension();
                xamlType = userType;
                break;

            case 80:   //  Microsoft.UI.Xaml.Markup.MarkupExtension
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 81:   //  Microsoft.UI.Xaml.Media.FontFamily
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 82:   //  Windows.UI.Text.FontWeight
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_82_FontWeight;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 83:   //  Windows.UI.Text.FontStyle
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_83_FontStyle;
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case 84:   //  Microsoft.UI.Xaml.Media.Brush
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 85:   //  Microsoft.UI.Xaml.Controls.RadioButtons
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_85_RadioButtons;
                userType.StaticInitializer = StaticInitializer_85_RadioButtons;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.RadioButtons.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("MaxColumns");
                userType.AddMemberName("SelectedItem");
                xamlType = userType;
                break;

            case 86:   //  Microsoft.UI.Xaml.Controls.LinedFlowLayout
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.VirtualizingLayout"));
                userType.Activator = Activate_86_LinedFlowLayout;
                userType.StaticInitializer = StaticInitializer_86_LinedFlowLayout;
                userType.AddMemberName("ItemsStretch");
                userType.AddMemberName("MinItemSpacing");
                userType.AddMemberName("ActualLineHeight");
                userType.AddMemberName("ItemsJustification");
                userType.AddMemberName("LineHeight");
                userType.AddMemberName("LineSpacing");
                userType.AddMemberName("RequestedRangeLength");
                userType.AddMemberName("RequestedRangeStartIndex");
                xamlType = userType;
                break;

            case 87:   //  Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsStretch
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_87_LinedFlowLayoutItemsStretch;
                userType.AddEnumValue("None", global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsStretch.None);
                userType.AddEnumValue("Fill", global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsStretch.Fill);
                xamlType = userType;
                break;

            case 88:   //  Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_88_LinedFlowLayoutItemsJustification;
                userType.AddEnumValue("Start", global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification.Start);
                userType.AddEnumValue("Center", global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification.Center);
                userType.AddEnumValue("End", global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification.End);
                userType.AddEnumValue("SpaceAround", global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification.SpaceAround);
                userType.AddEnumValue("SpaceBetween", global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification.SpaceBetween);
                userType.AddEnumValue("SpaceEvenly", global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification.SpaceEvenly);
                xamlType = userType;
                break;

            case 89:   //  Fluent_Launcher.Assets.Pages.Home.Page_InstanceOption
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_89_Page_InstanceOption;
                userType.StaticInitializer = StaticInitializer_89_Page_InstanceOption;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 90:   //  Fluent_Launcher.Assets.Pages.Home.Page_PlayerOptionsDialog
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_90_Page_PlayerOptionsDialog;
                userType.StaticInitializer = StaticInitializer_90_Page_PlayerOptionsDialog;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 91:   //  Fluent_Launcher.Assets.Pages.Home.Page_SelectInstance
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_91_Page_SelectInstance;
                userType.StaticInitializer = StaticInitializer_91_Page_SelectInstance;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 92:   //  Microsoft.UI.Xaml.Media.DesktopAcrylicBackdrop
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Media.SystemBackdrop"));
                userType.Activator = Activate_92_DesktopAcrylicBackdrop;
                userType.StaticInitializer = StaticInitializer_92_DesktopAcrylicBackdrop;
                xamlType = userType;
                break;

            case 93:   //  Microsoft.UI.Xaml.Media.SystemBackdrop
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 94:   //  Microsoft.UI.Xaml.Controls.NavigationView
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_94_NavigationView;
                userType.StaticInitializer = StaticInitializer_94_NavigationView;
                userType.AddMemberName("PaneDisplayMode");
                userType.AddMemberName("Header");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("AlwaysShowHeader");
                userType.AddMemberName("AutoSuggestBox");
                userType.AddMemberName("CompactModeThresholdWidth");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("ContentOverlay");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("ExpandedModeThresholdWidth");
                userType.AddMemberName("FooterMenuItems");
                userType.AddMemberName("FooterMenuItemsSource");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("IsBackButtonVisible");
                userType.AddMemberName("IsBackEnabled");
                userType.AddMemberName("IsPaneOpen");
                userType.AddMemberName("IsPaneToggleButtonVisible");
                userType.AddMemberName("IsPaneVisible");
                userType.AddMemberName("IsSettingsVisible");
                userType.AddMemberName("IsTitleBarAutoPaddingEnabled");
                userType.AddMemberName("MenuItemContainerStyle");
                userType.AddMemberName("MenuItemContainerStyleSelector");
                userType.AddMemberName("MenuItemTemplate");
                userType.AddMemberName("MenuItemTemplateSelector");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("OpenPaneLength");
                userType.AddMemberName("OverflowLabelMode");
                userType.AddMemberName("PaneCustomContent");
                userType.AddMemberName("PaneFooter");
                userType.AddMemberName("PaneHeader");
                userType.AddMemberName("PaneTitle");
                userType.AddMemberName("PaneToggleButtonStyle");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SelectionFollowsFocus");
                userType.AddMemberName("SettingsItem");
                userType.AddMemberName("ShoulderNavigationEnabled");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 95:   //  Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_95_NavigationViewPaneDisplayMode;
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Auto);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Left);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Top);
                userType.AddEnumValue("LeftCompact", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftCompact);
                userType.AddEnumValue("LeftMinimal", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftMinimal);
                xamlType = userType;
                break;

            case 96:   //  Microsoft.UI.Xaml.Controls.AutoSuggestBox
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 97:   //  Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_97_NavigationViewDisplayMode;
                userType.AddEnumValue("Minimal", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Minimal);
                userType.AddEnumValue("Compact", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Compact);
                userType.AddEnumValue("Expanded", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Expanded);
                xamlType = userType;
                break;

            case 98:   //  Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_98_NavigationViewBackButtonVisible;
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Collapsed);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Visible);
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Auto);
                xamlType = userType;
                break;

            case 99:   //  Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_99_NavigationViewOverflowLabelMode;
                userType.AddEnumValue("MoreLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.MoreLabel);
                userType.AddEnumValue("NoLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.NoLabel);
                xamlType = userType;
                break;

            case 100:   //  Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_100_NavigationViewSelectionFollowsFocus;
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Disabled);
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Enabled);
                xamlType = userType;
                break;

            case 101:   //  Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_101_NavigationViewShoulderNavigationEnabled;
                userType.AddEnumValue("WhenSelectionFollowsFocus", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus);
                userType.AddEnumValue("Always", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Always);
                userType.AddEnumValue("Never", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Never);
                xamlType = userType;
                break;

            case 102:   //  Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.StaticInitializer = StaticInitializer_102_NavigationViewTemplateSettings;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 103:   //  Microsoft.UI.Xaml.Controls.BreadcrumbBar
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_103_BreadcrumbBar;
                userType.StaticInitializer = StaticInitializer_103_BreadcrumbBar;
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ItemTemplate");
                xamlType = userType;
                break;

            case 104:   //  Microsoft.UI.Xaml.Controls.NavigationViewItem
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"));
                userType.Activator = Activate_104_NavigationViewItem;
                userType.StaticInitializer = StaticInitializer_104_NavigationViewItem;
                userType.AddMemberName("Icon");
                userType.AddMemberName("SelectsOnInvoked");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("InfoBadge");
                userType.AddMemberName("IsChildSelected");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("MenuItemsSource");
                xamlType = userType;
                break;

            case 105:   //  Microsoft.UI.Xaml.Controls.NavigationViewItemBase
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.StaticInitializer = StaticInitializer_105_NavigationViewItemBase;
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 106:   //  Microsoft.UI.Xaml.Controls.InfoBadge
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.StaticInitializer = StaticInitializer_106_InfoBadge;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 107:   //  Microsoft.UI.Xaml.Controls.NavigationViewItemHeader
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"));
                userType.Activator = Activate_107_NavigationViewItemHeader;
                userType.StaticInitializer = StaticInitializer_107_NavigationViewItemHeader;
                xamlType = userType;
                break;

            case 108:   //  Fluent_Launcher.MainWindow
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_108_MainWindow;
                userType.StaticInitializer = StaticInitializer_108_MainWindow;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 109:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 110:   //  Microsoft.UI.Xaml.Controls.TreeViewNode
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_110_TreeViewNode;
                userType.StaticInitializer = StaticInitializer_110_TreeViewNode;
                userType.AddMemberName("Children");
                userType.AddMemberName("Content");
                userType.AddMemberName("Depth");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Parent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 111:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
                userType = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_111_IList;
                userType.CollectionAdd = VectorAdd_111_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.Controls.SettingsControlsRns.CommunityToolkit_WinUI_Controls_SettingsControls_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_Thickness_Left(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Left;
        }
        private void set_1_Thickness_Left(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Left = (global::System.Double)Value;
        }
        private object get_2_Thickness_Top(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Top;
        }
        private void set_2_Thickness_Top(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Top = (global::System.Double)Value;
        }
        private object get_3_Thickness_Right(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Right;
        }
        private void set_3_Thickness_Right(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Right = (global::System.Double)Value;
        }
        private object get_4_Thickness_Bottom(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            return that.Bottom;
        }
        private void set_4_Thickness_Bottom(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Thickness)instance;
            that.Bottom = (global::System.Double)Value;
        }
        private object get_5_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_5_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_6_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_6_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_7_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_7_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_8_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_8_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_9_ScrollView_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.Content;
        }
        private void set_9_ScrollView_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.Content = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_10_ScrollView_ComputedHorizontalScrollBarVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ComputedHorizontalScrollBarVisibility;
        }
        private object get_11_ScrollView_ComputedHorizontalScrollMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ComputedHorizontalScrollMode;
        }
        private object get_12_ScrollView_ComputedVerticalScrollBarVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ComputedVerticalScrollBarVisibility;
        }
        private object get_13_ScrollView_ComputedVerticalScrollMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ComputedVerticalScrollMode;
        }
        private object get_14_ScrollView_ContentOrientation(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ContentOrientation;
        }
        private void set_14_ScrollView_ContentOrientation(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.ContentOrientation = (global::Microsoft.UI.Xaml.Controls.ScrollingContentOrientation)Value;
        }
        private object get_15_ScrollView_CurrentAnchor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.CurrentAnchor;
        }
        private object get_16_ScrollView_ExpressionAnimationSources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ExpressionAnimationSources;
        }
        private object get_17_ScrollView_ExtentHeight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ExtentHeight;
        }
        private object get_18_ScrollView_ExtentWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ExtentWidth;
        }
        private object get_19_ScrollView_HorizontalAnchorRatio(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalAnchorRatio;
        }
        private void set_19_ScrollView_HorizontalAnchorRatio(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.HorizontalAnchorRatio = (global::System.Double)Value;
        }
        private object get_20_ScrollView_HorizontalOffset(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalOffset;
        }
        private object get_21_ScrollView_HorizontalScrollBarVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalScrollBarVisibility;
        }
        private void set_21_ScrollView_HorizontalScrollBarVisibility(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.HorizontalScrollBarVisibility = (global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility)Value;
        }
        private object get_22_ScrollView_HorizontalScrollChainMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalScrollChainMode;
        }
        private void set_22_ScrollView_HorizontalScrollChainMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.HorizontalScrollChainMode = (global::Microsoft.UI.Xaml.Controls.ScrollingChainMode)Value;
        }
        private object get_23_ScrollView_HorizontalScrollMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalScrollMode;
        }
        private void set_23_ScrollView_HorizontalScrollMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.HorizontalScrollMode = (global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode)Value;
        }
        private object get_24_ScrollView_HorizontalScrollRailMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.HorizontalScrollRailMode;
        }
        private void set_24_ScrollView_HorizontalScrollRailMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.HorizontalScrollRailMode = (global::Microsoft.UI.Xaml.Controls.ScrollingRailMode)Value;
        }
        private object get_25_ScrollView_IgnoredInputKinds(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.IgnoredInputKinds;
        }
        private void set_25_ScrollView_IgnoredInputKinds(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.IgnoredInputKinds = (global::Microsoft.UI.Xaml.Controls.ScrollingInputKinds)Value;
        }
        private object get_26_ScrollView_MaxZoomFactor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.MaxZoomFactor;
        }
        private void set_26_ScrollView_MaxZoomFactor(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.MaxZoomFactor = (global::System.Double)Value;
        }
        private object get_27_ScrollView_MinZoomFactor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.MinZoomFactor;
        }
        private void set_27_ScrollView_MinZoomFactor(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.MinZoomFactor = (global::System.Double)Value;
        }
        private object get_28_ScrollView_ScrollPresenter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ScrollPresenter;
        }
        private object get_29_ScrollPresenter_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter)instance;
            return that.Content;
        }
        private void set_29_ScrollPresenter_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter)instance;
            that.Content = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_30_ScrollView_ScrollableHeight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ScrollableHeight;
        }
        private object get_31_ScrollView_ScrollableWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ScrollableWidth;
        }
        private object get_32_ScrollView_State(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.State;
        }
        private object get_33_ScrollView_VerticalAnchorRatio(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalAnchorRatio;
        }
        private void set_33_ScrollView_VerticalAnchorRatio(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.VerticalAnchorRatio = (global::System.Double)Value;
        }
        private object get_34_ScrollView_VerticalOffset(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalOffset;
        }
        private object get_35_ScrollView_VerticalScrollBarVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalScrollBarVisibility;
        }
        private void set_35_ScrollView_VerticalScrollBarVisibility(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.VerticalScrollBarVisibility = (global::Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility)Value;
        }
        private object get_36_ScrollView_VerticalScrollChainMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalScrollChainMode;
        }
        private void set_36_ScrollView_VerticalScrollChainMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.VerticalScrollChainMode = (global::Microsoft.UI.Xaml.Controls.ScrollingChainMode)Value;
        }
        private object get_37_ScrollView_VerticalScrollMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalScrollMode;
        }
        private void set_37_ScrollView_VerticalScrollMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.VerticalScrollMode = (global::Microsoft.UI.Xaml.Controls.ScrollingScrollMode)Value;
        }
        private object get_38_ScrollView_VerticalScrollRailMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.VerticalScrollRailMode;
        }
        private void set_38_ScrollView_VerticalScrollRailMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.VerticalScrollRailMode = (global::Microsoft.UI.Xaml.Controls.ScrollingRailMode)Value;
        }
        private object get_39_ScrollView_ViewportHeight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ViewportHeight;
        }
        private object get_40_ScrollView_ViewportWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ViewportWidth;
        }
        private object get_41_ScrollView_ZoomChainMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ZoomChainMode;
        }
        private void set_41_ScrollView_ZoomChainMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.ZoomChainMode = (global::Microsoft.UI.Xaml.Controls.ScrollingChainMode)Value;
        }
        private object get_42_ScrollView_ZoomFactor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ZoomFactor;
        }
        private object get_43_ScrollView_ZoomMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            return that.ZoomMode;
        }
        private void set_43_ScrollView_ZoomMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ScrollView)instance;
            that.ZoomMode = (global::Microsoft.UI.Xaml.Controls.ScrollingZoomMode)Value;
        }
        private object get_44_ProgressBar_IsIndeterminate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            return that.IsIndeterminate;
        }
        private void set_44_ProgressBar_IsIndeterminate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            that.IsIndeterminate = (global::System.Boolean)Value;
        }
        private object get_45_ProgressBar_ShowPaused(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            return that.ShowPaused;
        }
        private void set_45_ProgressBar_ShowPaused(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            that.ShowPaused = (global::System.Boolean)Value;
        }
        private object get_46_ProgressBar_ShowError(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            return that.ShowError;
        }
        private void set_46_ProgressBar_ShowError(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            that.ShowError = (global::System.Boolean)Value;
        }
        private object get_47_ProgressBar_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressBar)instance;
            return that.TemplateSettings;
        }
        private object get_48_ItemsView_SelectionMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.SelectionMode;
        }
        private void set_48_ItemsView_SelectionMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            that.SelectionMode = (global::Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode)Value;
        }
        private object get_49_ItemsView_Layout(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.Layout;
        }
        private void set_49_ItemsView_Layout(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            that.Layout = (global::Microsoft.UI.Xaml.Controls.Layout)Value;
        }
        private object get_50_ItemsView_ItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.ItemTemplate;
        }
        private void set_50_ItemsView_ItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            that.ItemTemplate = (global::Microsoft.UI.Xaml.IElementFactory)Value;
        }
        private object get_51_ItemsView_CurrentItemIndex(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.CurrentItemIndex;
        }
        private object get_52_ItemsView_IsItemInvokedEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.IsItemInvokedEnabled;
        }
        private void set_52_ItemsView_IsItemInvokedEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            that.IsItemInvokedEnabled = (global::System.Boolean)Value;
        }
        private object get_53_ItemsView_ItemTransitionProvider(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.ItemTransitionProvider;
        }
        private void set_53_ItemsView_ItemTransitionProvider(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            that.ItemTransitionProvider = (global::Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider)Value;
        }
        private object get_54_ItemsView_ItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.ItemsSource;
        }
        private void set_54_ItemsView_ItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_55_ItemsView_ScrollView(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.ScrollView;
        }
        private object get_56_ItemsView_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.SelectedItem;
        }
        private object get_57_ItemsView_SelectedItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.SelectedItems;
        }
        private object get_58_ItemsView_VerticalScrollController(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            return that.VerticalScrollController;
        }
        private void set_58_ItemsView_VerticalScrollController(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemsView)instance;
            that.VerticalScrollController = (global::Microsoft.UI.Xaml.Controls.Primitives.IScrollController)Value;
        }
        private object get_59_UniformGridLayout_ItemsStretch(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.ItemsStretch;
        }
        private void set_59_UniformGridLayout_ItemsStretch(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.ItemsStretch = (global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch)Value;
        }
        private object get_60_UniformGridLayout_MinRowSpacing(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.MinRowSpacing;
        }
        private void set_60_UniformGridLayout_MinRowSpacing(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.MinRowSpacing = (global::System.Double)Value;
        }
        private object get_61_UniformGridLayout_MinColumnSpacing(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.MinColumnSpacing;
        }
        private void set_61_UniformGridLayout_MinColumnSpacing(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.MinColumnSpacing = (global::System.Double)Value;
        }
        private object get_62_UniformGridLayout_MinItemWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.MinItemWidth;
        }
        private void set_62_UniformGridLayout_MinItemWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.MinItemWidth = (global::System.Double)Value;
        }
        private object get_63_UniformGridLayout_ItemsJustification(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.ItemsJustification;
        }
        private void set_63_UniformGridLayout_ItemsJustification(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.ItemsJustification = (global::Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification)Value;
        }
        private object get_64_UniformGridLayout_MaximumRowsOrColumns(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.MaximumRowsOrColumns;
        }
        private void set_64_UniformGridLayout_MaximumRowsOrColumns(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.MaximumRowsOrColumns = (global::System.Int32)Value;
        }
        private object get_65_UniformGridLayout_MinItemHeight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.MinItemHeight;
        }
        private void set_65_UniformGridLayout_MinItemHeight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.MinItemHeight = (global::System.Double)Value;
        }
        private object get_66_UniformGridLayout_Orientation(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            return that.Orientation;
        }
        private void set_66_UniformGridLayout_Orientation(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.UniformGridLayout)instance;
            that.Orientation = (global::Microsoft.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_67_Layout_IndexBasedLayoutOrientation(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Layout)instance;
            return that.IndexBasedLayoutOrientation;
        }
        private object get_68_ItemContainer_Child(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemContainer)instance;
            return that.Child;
        }
        private void set_68_ItemContainer_Child(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemContainer)instance;
            that.Child = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_69_ItemContainer_IsSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemContainer)instance;
            return that.IsSelected;
        }
        private void set_69_ItemContainer_IsSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ItemContainer)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_70_SettingsExpander_Content(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.Content;
        }
        private void set_70_SettingsExpander_Content(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_71_SettingsExpander_IsExpanded(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.IsExpanded;
        }
        private void set_71_SettingsExpander_IsExpanded(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_72_SettingsExpander_Header(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.Header;
        }
        private void set_72_SettingsExpander_Header(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_73_SettingsExpander_Items(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.Items;
        }
        private void set_73_SettingsExpander_Items(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.Items = (global::System.Collections.Generic.IList<global::System.Object>)Value;
        }
        private object get_74_SettingsExpander_ItemsSource(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.ItemsSource;
        }
        private void set_74_SettingsExpander_ItemsSource(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_75_SettingsExpander_ItemTemplate(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.ItemTemplate;
        }
        private void set_75_SettingsExpander_ItemTemplate(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.ItemTemplate = (global::System.Object)Value;
        }
        private object get_76_SettingsExpander_ItemContainerStyleSelector(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.ItemContainerStyleSelector;
        }
        private void set_76_SettingsExpander_ItemContainerStyleSelector(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.ItemContainerStyleSelector = (global::Microsoft.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_77_SettingsExpander_Description(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.Description;
        }
        private void set_77_SettingsExpander_Description(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.Description = (global::System.Object)Value;
        }
        private object get_78_SettingsExpander_HeaderIcon(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.HeaderIcon;
        }
        private void set_78_SettingsExpander_HeaderIcon(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.HeaderIcon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_79_SettingsExpander_ItemsHeader(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.ItemsHeader;
        }
        private void set_79_SettingsExpander_ItemsHeader(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.ItemsHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_80_SettingsExpander_ItemsFooter(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            return that.ItemsFooter;
        }
        private void set_80_SettingsExpander_ItemsFooter(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsExpander)instance;
            that.ItemsFooter = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_81_SettingsCard_Header(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.Header;
        }
        private void set_81_SettingsCard_Header(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_82_SettingsCard_Description(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.Description;
        }
        private void set_82_SettingsCard_Description(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.Description = (global::System.Object)Value;
        }
        private object get_83_SettingsCard_HeaderIcon(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.HeaderIcon;
        }
        private void set_83_SettingsCard_HeaderIcon(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.HeaderIcon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_84_SettingsCard_ActionIcon(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.ActionIcon;
        }
        private void set_84_SettingsCard_ActionIcon(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.ActionIcon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_85_SettingsCard_ActionIconToolTip(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.ActionIconToolTip;
        }
        private void set_85_SettingsCard_ActionIconToolTip(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.ActionIconToolTip = (global::System.String)Value;
        }
        private object get_86_SettingsCard_IsClickEnabled(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.IsClickEnabled;
        }
        private void set_86_SettingsCard_IsClickEnabled(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.IsClickEnabled = (global::System.Boolean)Value;
        }
        private object get_87_SettingsCard_ContentAlignment(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.ContentAlignment;
        }
        private void set_87_SettingsCard_ContentAlignment(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.ContentAlignment = (global::CommunityToolkit.WinUI.Controls.ContentAlignment)Value;
        }
        private object get_88_SettingsCard_IsActionIconVisible(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            return that.IsActionIconVisible;
        }
        private void set_88_SettingsCard_IsActionIconVisible(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SettingsCard)instance;
            that.IsActionIconVisible = (global::System.Boolean)Value;
        }
        private object get_89_InfoBar_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Content;
        }
        private void set_89_InfoBar_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_90_InfoBar_IsOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsOpen;
        }
        private void set_90_InfoBar_IsOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_91_InfoBar_Severity(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Severity;
        }
        private void set_91_InfoBar_Severity(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Severity = (global::Microsoft.UI.Xaml.Controls.InfoBarSeverity)Value;
        }
        private object get_92_InfoBar_ActionButton(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.ActionButton;
        }
        private void set_92_InfoBar_ActionButton(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.ActionButton = (global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase)Value;
        }
        private object get_93_InfoBar_CloseButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonCommand;
        }
        private void set_93_InfoBar_CloseButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_94_InfoBar_CloseButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonCommandParameter;
        }
        private void set_94_InfoBar_CloseButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_95_InfoBar_CloseButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonStyle;
        }
        private void set_95_InfoBar_CloseButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_96_InfoBar_ContentTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.ContentTemplate;
        }
        private void set_96_InfoBar_ContentTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.ContentTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_97_InfoBar_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IconSource;
        }
        private void set_97_InfoBar_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_98_InfoBar_IsClosable(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsClosable;
        }
        private void set_98_InfoBar_IsClosable(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsClosable = (global::System.Boolean)Value;
        }
        private object get_99_InfoBar_IsIconVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsIconVisible;
        }
        private void set_99_InfoBar_IsIconVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsIconVisible = (global::System.Boolean)Value;
        }
        private object get_100_InfoBar_Message(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Message;
        }
        private void set_100_InfoBar_Message(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Message = (global::System.String)Value;
        }
        private object get_101_InfoBar_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.TemplateSettings;
        }
        private object get_102_InfoBar_Title(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Title;
        }
        private void set_102_InfoBar_Title(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_103_Expander_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.IsExpanded;
        }
        private void set_103_Expander_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_104_Expander_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.Header;
        }
        private void set_104_Expander_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_105_Expander_ExpandDirection(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.ExpandDirection;
        }
        private void set_105_Expander_ExpandDirection(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.ExpandDirection = (global::Microsoft.UI.Xaml.Controls.ExpandDirection)Value;
        }
        private object get_106_Expander_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.HeaderTemplate;
        }
        private void set_106_Expander_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_107_Expander_HeaderTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.HeaderTemplateSelector;
        }
        private void set_107_Expander_HeaderTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.HeaderTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_108_Expander_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.TemplateSettings;
        }
        private object get_109_FontIconExtension_Glyph(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.FontIconExtension)instance;
            return that.Glyph;
        }
        private void set_109_FontIconExtension_Glyph(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.FontIconExtension)instance;
            that.Glyph = (global::System.String)Value;
        }
        private object get_110_FontIconExtension_FontFamily(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.FontIconExtension)instance;
            return that.FontFamily;
        }
        private void set_110_FontIconExtension_FontFamily(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.FontIconExtension)instance;
            that.FontFamily = (global::Microsoft.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_111_TextIconExtension_FontSize(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            return that.FontSize;
        }
        private void set_111_TextIconExtension_FontSize(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_112_TextIconExtension_FontWeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            return that.FontWeight;
        }
        private void set_112_TextIconExtension_FontWeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            that.FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_113_TextIconExtension_FontStyle(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            return that.FontStyle;
        }
        private void set_113_TextIconExtension_FontStyle(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_114_TextIconExtension_Foreground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            return that.Foreground;
        }
        private void set_114_TextIconExtension_Foreground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            that.Foreground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_115_TextIconExtension_IsTextScaleFactorEnabled(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            return that.IsTextScaleFactorEnabled;
        }
        private void set_115_TextIconExtension_IsTextScaleFactorEnabled(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            that.IsTextScaleFactorEnabled = (global::System.Boolean)Value;
        }
        private object get_116_TextIconExtension_MirroredWhenRightToLeft(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            return that.MirroredWhenRightToLeft;
        }
        private void set_116_TextIconExtension_MirroredWhenRightToLeft(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.TextIconExtension)instance;
            that.MirroredWhenRightToLeft = (global::System.Boolean)Value;
        }
        private object get_117_RadioButtons_Items(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.Items;
        }
        private object get_118_RadioButtons_SelectedIndex(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.SelectedIndex;
        }
        private void set_118_RadioButtons_SelectedIndex(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_119_RadioButtons_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.Header;
        }
        private void set_119_RadioButtons_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_120_RadioButtons_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.HeaderTemplate;
        }
        private void set_120_RadioButtons_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_121_RadioButtons_ItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.ItemTemplate;
        }
        private void set_121_RadioButtons_ItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.ItemTemplate = (global::System.Object)Value;
        }
        private object get_122_RadioButtons_ItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.ItemsSource;
        }
        private void set_122_RadioButtons_ItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_123_RadioButtons_MaxColumns(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.MaxColumns;
        }
        private void set_123_RadioButtons_MaxColumns(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.MaxColumns = (global::System.Int32)Value;
        }
        private object get_124_RadioButtons_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.SelectedItem;
        }
        private void set_124_RadioButtons_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_125_LinedFlowLayout_ItemsStretch(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            return that.ItemsStretch;
        }
        private void set_125_LinedFlowLayout_ItemsStretch(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            that.ItemsStretch = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsStretch)Value;
        }
        private object get_126_LinedFlowLayout_MinItemSpacing(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            return that.MinItemSpacing;
        }
        private void set_126_LinedFlowLayout_MinItemSpacing(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            that.MinItemSpacing = (global::System.Double)Value;
        }
        private object get_127_LinedFlowLayout_ActualLineHeight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            return that.ActualLineHeight;
        }
        private object get_128_LinedFlowLayout_ItemsJustification(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            return that.ItemsJustification;
        }
        private void set_128_LinedFlowLayout_ItemsJustification(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            that.ItemsJustification = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification)Value;
        }
        private object get_129_LinedFlowLayout_LineHeight(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            return that.LineHeight;
        }
        private void set_129_LinedFlowLayout_LineHeight(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            that.LineHeight = (global::System.Double)Value;
        }
        private object get_130_LinedFlowLayout_LineSpacing(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            return that.LineSpacing;
        }
        private void set_130_LinedFlowLayout_LineSpacing(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            that.LineSpacing = (global::System.Double)Value;
        }
        private object get_131_LinedFlowLayout_RequestedRangeLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            return that.RequestedRangeLength;
        }
        private object get_132_LinedFlowLayout_RequestedRangeStartIndex(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.LinedFlowLayout)instance;
            return that.RequestedRangeStartIndex;
        }
        private object get_133_NavigationView_PaneDisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneDisplayMode;
        }
        private void set_133_NavigationView_PaneDisplayMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneDisplayMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode)Value;
        }
        private object get_134_NavigationView_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.Header;
        }
        private void set_134_NavigationView_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_135_NavigationView_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItems;
        }
        private object get_136_NavigationView_AlwaysShowHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AlwaysShowHeader;
        }
        private void set_136_NavigationView_AlwaysShowHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AlwaysShowHeader = (global::System.Boolean)Value;
        }
        private object get_137_NavigationView_AutoSuggestBox(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AutoSuggestBox;
        }
        private void set_137_NavigationView_AutoSuggestBox(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AutoSuggestBox = (global::Microsoft.UI.Xaml.Controls.AutoSuggestBox)Value;
        }
        private object get_138_NavigationView_CompactModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactModeThresholdWidth;
        }
        private void set_138_NavigationView_CompactModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_139_NavigationView_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactPaneLength;
        }
        private void set_139_NavigationView_CompactPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactPaneLength = (global::System.Double)Value;
        }
        private object get_140_NavigationView_ContentOverlay(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ContentOverlay;
        }
        private void set_140_NavigationView_ContentOverlay(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ContentOverlay = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_141_NavigationView_DisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.DisplayMode;
        }
        private object get_142_NavigationView_ExpandedModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ExpandedModeThresholdWidth;
        }
        private void set_142_NavigationView_ExpandedModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ExpandedModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_143_NavigationView_FooterMenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItems;
        }
        private object get_144_NavigationView_FooterMenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItemsSource;
        }
        private void set_144_NavigationView_FooterMenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.FooterMenuItemsSource = (global::System.Object)Value;
        }
        private object get_145_NavigationView_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.HeaderTemplate;
        }
        private void set_145_NavigationView_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_146_NavigationView_IsBackButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackButtonVisible;
        }
        private void set_146_NavigationView_IsBackButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackButtonVisible = (global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible)Value;
        }
        private object get_147_NavigationView_IsBackEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackEnabled;
        }
        private void set_147_NavigationView_IsBackEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackEnabled = (global::System.Boolean)Value;
        }
        private object get_148_NavigationView_IsPaneOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneOpen;
        }
        private void set_148_NavigationView_IsPaneOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneOpen = (global::System.Boolean)Value;
        }
        private object get_149_NavigationView_IsPaneToggleButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneToggleButtonVisible;
        }
        private void set_149_NavigationView_IsPaneToggleButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneToggleButtonVisible = (global::System.Boolean)Value;
        }
        private object get_150_NavigationView_IsPaneVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneVisible;
        }
        private void set_150_NavigationView_IsPaneVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneVisible = (global::System.Boolean)Value;
        }
        private object get_151_NavigationView_IsSettingsVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsSettingsVisible;
        }
        private void set_151_NavigationView_IsSettingsVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsSettingsVisible = (global::System.Boolean)Value;
        }
        private object get_152_NavigationView_IsTitleBarAutoPaddingEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsTitleBarAutoPaddingEnabled;
        }
        private void set_152_NavigationView_IsTitleBarAutoPaddingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsTitleBarAutoPaddingEnabled = (global::System.Boolean)Value;
        }
        private object get_153_NavigationView_MenuItemContainerStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyle;
        }
        private void set_153_NavigationView_MenuItemContainerStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_154_NavigationView_MenuItemContainerStyleSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyleSelector;
        }
        private void set_154_NavigationView_MenuItemContainerStyleSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyleSelector = (global::Microsoft.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_155_NavigationView_MenuItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplate;
        }
        private void set_155_NavigationView_MenuItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_156_NavigationView_MenuItemTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplateSelector;
        }
        private void set_156_NavigationView_MenuItemTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_157_NavigationView_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemsSource;
        }
        private void set_157_NavigationView_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_158_NavigationView_OpenPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OpenPaneLength;
        }
        private void set_158_NavigationView_OpenPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OpenPaneLength = (global::System.Double)Value;
        }
        private object get_159_NavigationView_OverflowLabelMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OverflowLabelMode;
        }
        private void set_159_NavigationView_OverflowLabelMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OverflowLabelMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode)Value;
        }
        private object get_160_NavigationView_PaneCustomContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneCustomContent;
        }
        private void set_160_NavigationView_PaneCustomContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneCustomContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_161_NavigationView_PaneFooter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneFooter;
        }
        private void set_161_NavigationView_PaneFooter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneFooter = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_162_NavigationView_PaneHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneHeader;
        }
        private void set_162_NavigationView_PaneHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_163_NavigationView_PaneTitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneTitle;
        }
        private void set_163_NavigationView_PaneTitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneTitle = (global::System.String)Value;
        }
        private object get_164_NavigationView_PaneToggleButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneToggleButtonStyle;
        }
        private void set_164_NavigationView_PaneToggleButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneToggleButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_165_NavigationView_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectedItem;
        }
        private void set_165_NavigationView_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_166_NavigationView_SelectionFollowsFocus(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectionFollowsFocus;
        }
        private void set_166_NavigationView_SelectionFollowsFocus(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectionFollowsFocus = (global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus)Value;
        }
        private object get_167_NavigationView_SettingsItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SettingsItem;
        }
        private object get_168_NavigationView_ShoulderNavigationEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ShoulderNavigationEnabled;
        }
        private void set_168_NavigationView_ShoulderNavigationEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ShoulderNavigationEnabled = (global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled)Value;
        }
        private object get_169_NavigationView_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.TemplateSettings;
        }
        private object get_170_BreadcrumbBar_ItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.BreadcrumbBar)instance;
            return that.ItemsSource;
        }
        private void set_170_BreadcrumbBar_ItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.BreadcrumbBar)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_171_BreadcrumbBar_ItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.BreadcrumbBar)instance;
            return that.ItemTemplate;
        }
        private void set_171_BreadcrumbBar_ItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.BreadcrumbBar)instance;
            that.ItemTemplate = (global::System.Object)Value;
        }
        private object get_172_NavigationViewItem_Icon(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.Icon;
        }
        private void set_172_NavigationViewItem_Icon(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_173_NavigationViewItem_SelectsOnInvoked(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.SelectsOnInvoked;
        }
        private void set_173_NavigationViewItem_SelectsOnInvoked(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.SelectsOnInvoked = (global::System.Boolean)Value;
        }
        private object get_174_NavigationViewItem_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItems;
        }
        private object get_175_NavigationViewItem_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.CompactPaneLength;
        }
        private object get_176_NavigationViewItem_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_176_NavigationViewItem_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_177_NavigationViewItem_InfoBadge(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.InfoBadge;
        }
        private void set_177_NavigationViewItem_InfoBadge(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.InfoBadge = (global::Microsoft.UI.Xaml.Controls.InfoBadge)Value;
        }
        private object get_178_NavigationViewItem_IsChildSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsChildSelected;
        }
        private void set_178_NavigationViewItem_IsChildSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsChildSelected = (global::System.Boolean)Value;
        }
        private object get_179_NavigationViewItem_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsExpanded;
        }
        private void set_179_NavigationViewItem_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_180_NavigationViewItem_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItemsSource;
        }
        private void set_180_NavigationViewItem_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_181_NavigationViewItemBase_IsSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            return that.IsSelected;
        }
        private void set_181_NavigationViewItemBase_IsSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_182_TreeViewNode_Children(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Children;
        }
        private object get_183_TreeViewNode_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Content;
        }
        private void set_183_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_184_TreeViewNode_Depth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Depth;
        }
        private object get_185_TreeViewNode_HasChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasChildren;
        }
        private object get_186_TreeViewNode_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_186_TreeViewNode_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_187_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_187_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_188_TreeViewNode_Parent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Parent;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember xamlMember = null;
            global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "Microsoft.UI.Xaml.Thickness.Left":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Left", "Double");
                xamlMember.Getter = get_1_Thickness_Left;
                xamlMember.Setter = set_1_Thickness_Left;
                break;
            case "Microsoft.UI.Xaml.Thickness.Top":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Top", "Double");
                xamlMember.Getter = get_2_Thickness_Top;
                xamlMember.Setter = set_2_Thickness_Top;
                break;
            case "Microsoft.UI.Xaml.Thickness.Right":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Right", "Double");
                xamlMember.Getter = get_3_Thickness_Right;
                xamlMember.Setter = set_3_Thickness_Right;
                break;
            case "Microsoft.UI.Xaml.Thickness.Bottom":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Thickness");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Bottom", "Double");
                xamlMember.Getter = get_4_Thickness_Bottom;
                xamlMember.Setter = set_4_Thickness_Bottom;
                break;
            case "Windows.UI.Color.A":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_5_Color_A;
                xamlMember.Setter = set_5_Color_A;
                break;
            case "Windows.UI.Color.R":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_6_Color_R;
                xamlMember.Setter = set_6_Color_R;
                break;
            case "Windows.UI.Color.G":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_7_Color_G;
                xamlMember.Setter = set_7_Color_G;
                break;
            case "Windows.UI.Color.B":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_8_Color_B;
                xamlMember.Setter = set_8_Color_B;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.Content":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Content", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_ScrollView_Content;
                xamlMember.Setter = set_9_ScrollView_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ComputedHorizontalScrollBarVisibility":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ComputedHorizontalScrollBarVisibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_ScrollView_ComputedHorizontalScrollBarVisibility;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ComputedHorizontalScrollMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ComputedHorizontalScrollMode", "Microsoft.UI.Xaml.Controls.ScrollingScrollMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_ScrollView_ComputedHorizontalScrollMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ComputedVerticalScrollBarVisibility":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ComputedVerticalScrollBarVisibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_ScrollView_ComputedVerticalScrollBarVisibility;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ComputedVerticalScrollMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ComputedVerticalScrollMode", "Microsoft.UI.Xaml.Controls.ScrollingScrollMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_ScrollView_ComputedVerticalScrollMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ContentOrientation":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ContentOrientation", "Microsoft.UI.Xaml.Controls.ScrollingContentOrientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_ScrollView_ContentOrientation;
                xamlMember.Setter = set_14_ScrollView_ContentOrientation;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.CurrentAnchor":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "CurrentAnchor", "Microsoft.UI.Xaml.UIElement");
                xamlMember.Getter = get_15_ScrollView_CurrentAnchor;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ExpressionAnimationSources":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ExpressionAnimationSources", "Microsoft.UI.Composition.CompositionPropertySet");
                xamlMember.Getter = get_16_ScrollView_ExpressionAnimationSources;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ExtentHeight":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ExtentHeight", "Double");
                xamlMember.Getter = get_17_ScrollView_ExtentHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ExtentWidth":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ExtentWidth", "Double");
                xamlMember.Getter = get_18_ScrollView_ExtentWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalAnchorRatio":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HorizontalAnchorRatio", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_ScrollView_HorizontalAnchorRatio;
                xamlMember.Setter = set_19_ScrollView_HorizontalAnchorRatio;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalOffset":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HorizontalOffset", "Double");
                xamlMember.Getter = get_20_ScrollView_HorizontalOffset;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalScrollBarVisibility":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HorizontalScrollBarVisibility", "Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_ScrollView_HorizontalScrollBarVisibility;
                xamlMember.Setter = set_21_ScrollView_HorizontalScrollBarVisibility;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalScrollChainMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HorizontalScrollChainMode", "Microsoft.UI.Xaml.Controls.ScrollingChainMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_ScrollView_HorizontalScrollChainMode;
                xamlMember.Setter = set_22_ScrollView_HorizontalScrollChainMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalScrollMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HorizontalScrollMode", "Microsoft.UI.Xaml.Controls.ScrollingScrollMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_ScrollView_HorizontalScrollMode;
                xamlMember.Setter = set_23_ScrollView_HorizontalScrollMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.HorizontalScrollRailMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HorizontalScrollRailMode", "Microsoft.UI.Xaml.Controls.ScrollingRailMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_ScrollView_HorizontalScrollRailMode;
                xamlMember.Setter = set_24_ScrollView_HorizontalScrollRailMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.IgnoredInputKinds":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IgnoredInputKinds", "Microsoft.UI.Xaml.Controls.ScrollingInputKinds");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_ScrollView_IgnoredInputKinds;
                xamlMember.Setter = set_25_ScrollView_IgnoredInputKinds;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.MaxZoomFactor":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MaxZoomFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_ScrollView_MaxZoomFactor;
                xamlMember.Setter = set_26_ScrollView_MaxZoomFactor;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.MinZoomFactor":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MinZoomFactor", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_ScrollView_MinZoomFactor;
                xamlMember.Setter = set_27_ScrollView_MinZoomFactor;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ScrollPresenter":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ScrollPresenter", "Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_ScrollView_ScrollPresenter;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter.Content":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Primitives.ScrollPresenter");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Content", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_ScrollPresenter_Content;
                xamlMember.Setter = set_29_ScrollPresenter_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ScrollableHeight":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ScrollableHeight", "Double");
                xamlMember.Getter = get_30_ScrollView_ScrollableHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ScrollableWidth":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ScrollableWidth", "Double");
                xamlMember.Getter = get_31_ScrollView_ScrollableWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.State":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "State", "Microsoft.UI.Xaml.Controls.ScrollingInteractionState");
                xamlMember.Getter = get_32_ScrollView_State;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalAnchorRatio":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "VerticalAnchorRatio", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_ScrollView_VerticalAnchorRatio;
                xamlMember.Setter = set_33_ScrollView_VerticalAnchorRatio;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalOffset":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "VerticalOffset", "Double");
                xamlMember.Getter = get_34_ScrollView_VerticalOffset;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalScrollBarVisibility":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "VerticalScrollBarVisibility", "Microsoft.UI.Xaml.Controls.ScrollingScrollBarVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_ScrollView_VerticalScrollBarVisibility;
                xamlMember.Setter = set_35_ScrollView_VerticalScrollBarVisibility;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalScrollChainMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "VerticalScrollChainMode", "Microsoft.UI.Xaml.Controls.ScrollingChainMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_ScrollView_VerticalScrollChainMode;
                xamlMember.Setter = set_36_ScrollView_VerticalScrollChainMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalScrollMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "VerticalScrollMode", "Microsoft.UI.Xaml.Controls.ScrollingScrollMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_ScrollView_VerticalScrollMode;
                xamlMember.Setter = set_37_ScrollView_VerticalScrollMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.VerticalScrollRailMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "VerticalScrollRailMode", "Microsoft.UI.Xaml.Controls.ScrollingRailMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_ScrollView_VerticalScrollRailMode;
                xamlMember.Setter = set_38_ScrollView_VerticalScrollRailMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ViewportHeight":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ViewportHeight", "Double");
                xamlMember.Getter = get_39_ScrollView_ViewportHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ViewportWidth":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ViewportWidth", "Double");
                xamlMember.Getter = get_40_ScrollView_ViewportWidth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ZoomChainMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ZoomChainMode", "Microsoft.UI.Xaml.Controls.ScrollingChainMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_ScrollView_ZoomChainMode;
                xamlMember.Setter = set_41_ScrollView_ZoomChainMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ZoomFactor":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ZoomFactor", "Single");
                xamlMember.Getter = get_42_ScrollView_ZoomFactor;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ScrollView.ZoomMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ZoomMode", "Microsoft.UI.Xaml.Controls.ScrollingZoomMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_ScrollView_ZoomMode;
                xamlMember.Setter = set_43_ScrollView_ZoomMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressBar.IsIndeterminate":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsIndeterminate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_ProgressBar_IsIndeterminate;
                xamlMember.Setter = set_44_ProgressBar_IsIndeterminate;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressBar.ShowPaused":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ShowPaused", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_ProgressBar_ShowPaused;
                xamlMember.Setter = set_45_ProgressBar_ShowPaused;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressBar.ShowError":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ShowError", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_ProgressBar_ShowError;
                xamlMember.Setter = set_46_ProgressBar_ShowError;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressBar.TemplateSettings":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ProgressBarTemplateSettings");
                xamlMember.Getter = get_47_ProgressBar_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.SelectionMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "SelectionMode", "Microsoft.UI.Xaml.Controls.ItemsViewSelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_ItemsView_SelectionMode;
                xamlMember.Setter = set_48_ItemsView_SelectionMode;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.Layout":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Layout", "Microsoft.UI.Xaml.Controls.Layout");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_ItemsView_Layout;
                xamlMember.Setter = set_49_ItemsView_Layout;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.ItemTemplate":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Microsoft.UI.Xaml.IElementFactory");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_ItemsView_ItemTemplate;
                xamlMember.Setter = set_50_ItemsView_ItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.CurrentItemIndex":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "CurrentItemIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_ItemsView_CurrentItemIndex;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.IsItemInvokedEnabled":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsItemInvokedEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_ItemsView_IsItemInvokedEnabled;
                xamlMember.Setter = set_52_ItemsView_IsItemInvokedEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.ItemTransitionProvider":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemTransitionProvider", "Microsoft.UI.Xaml.Controls.ItemCollectionTransitionProvider");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_ItemsView_ItemTransitionProvider;
                xamlMember.Setter = set_53_ItemsView_ItemTransitionProvider;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.ItemsSource":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_ItemsView_ItemsSource;
                xamlMember.Setter = set_54_ItemsView_ItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.ScrollView":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ScrollView", "Microsoft.UI.Xaml.Controls.ScrollView");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_ItemsView_ScrollView;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.SelectedItem":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_ItemsView_SelectedItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.SelectedItems":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.Generic.IReadOnlyList`1<Object>");
                xamlMember.Getter = get_57_ItemsView_SelectedItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ItemsView.VerticalScrollController":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "VerticalScrollController", "Microsoft.UI.Xaml.Controls.Primitives.IScrollController");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_ItemsView_VerticalScrollController;
                xamlMember.Setter = set_58_ItemsView_VerticalScrollController;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.ItemsStretch":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemsStretch", "Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsStretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_UniformGridLayout_ItemsStretch;
                xamlMember.Setter = set_59_UniformGridLayout_ItemsStretch;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.MinRowSpacing":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MinRowSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_UniformGridLayout_MinRowSpacing;
                xamlMember.Setter = set_60_UniformGridLayout_MinRowSpacing;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.MinColumnSpacing":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MinColumnSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_UniformGridLayout_MinColumnSpacing;
                xamlMember.Setter = set_61_UniformGridLayout_MinColumnSpacing;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.MinItemWidth":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MinItemWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_UniformGridLayout_MinItemWidth;
                xamlMember.Setter = set_62_UniformGridLayout_MinItemWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.ItemsJustification":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemsJustification", "Microsoft.UI.Xaml.Controls.UniformGridLayoutItemsJustification");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_UniformGridLayout_ItemsJustification;
                xamlMember.Setter = set_63_UniformGridLayout_ItemsJustification;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.MaximumRowsOrColumns":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MaximumRowsOrColumns", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_UniformGridLayout_MaximumRowsOrColumns;
                xamlMember.Setter = set_64_UniformGridLayout_MaximumRowsOrColumns;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.MinItemHeight":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MinItemHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_UniformGridLayout_MinItemHeight;
                xamlMember.Setter = set_65_UniformGridLayout_MinItemHeight;
                break;
            case "Microsoft.UI.Xaml.Controls.UniformGridLayout.Orientation":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UniformGridLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Orientation", "Microsoft.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_UniformGridLayout_Orientation;
                xamlMember.Setter = set_66_UniformGridLayout_Orientation;
                break;
            case "Microsoft.UI.Xaml.Controls.Layout.IndexBasedLayoutOrientation":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Layout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IndexBasedLayoutOrientation", "Microsoft.UI.Xaml.Controls.IndexBasedLayoutOrientation");
                xamlMember.Getter = get_67_Layout_IndexBasedLayoutOrientation;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ItemContainer.Child":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemContainer");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Child", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_ItemContainer_Child;
                xamlMember.Setter = set_68_ItemContainer_Child;
                break;
            case "Microsoft.UI.Xaml.Controls.ItemContainer.IsSelected":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemContainer");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_ItemContainer_IsSelected;
                xamlMember.Setter = set_69_ItemContainer_IsSelected;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.Content":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_SettingsExpander_Content;
                xamlMember.Setter = set_70_SettingsExpander_Content;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.IsExpanded":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_SettingsExpander_IsExpanded;
                xamlMember.Setter = set_71_SettingsExpander_IsExpanded;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.Header":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_SettingsExpander_Header;
                xamlMember.Setter = set_72_SettingsExpander_Header;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.Items":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_SettingsExpander_Items;
                xamlMember.Setter = set_73_SettingsExpander_Items;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.ItemsSource":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_SettingsExpander_ItemsSource;
                xamlMember.Setter = set_74_SettingsExpander_ItemsSource;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.ItemTemplate":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_SettingsExpander_ItemTemplate;
                xamlMember.Setter = set_75_SettingsExpander_ItemTemplate;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.ItemContainerStyleSelector":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemContainerStyleSelector", "Microsoft.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_SettingsExpander_ItemContainerStyleSelector;
                xamlMember.Setter = set_76_SettingsExpander_ItemContainerStyleSelector;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.Description":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Description", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_SettingsExpander_Description;
                xamlMember.Setter = set_77_SettingsExpander_Description;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.HeaderIcon":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HeaderIcon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_SettingsExpander_HeaderIcon;
                xamlMember.Setter = set_78_SettingsExpander_HeaderIcon;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.ItemsHeader":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemsHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_SettingsExpander_ItemsHeader;
                xamlMember.Setter = set_79_SettingsExpander_ItemsHeader;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsExpander.ItemsFooter":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsExpander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemsFooter", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_SettingsExpander_ItemsFooter;
                xamlMember.Setter = set_80_SettingsExpander_ItemsFooter;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.Header":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_SettingsCard_Header;
                xamlMember.Setter = set_81_SettingsCard_Header;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.Description":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Description", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_SettingsCard_Description;
                xamlMember.Setter = set_82_SettingsCard_Description;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.HeaderIcon":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HeaderIcon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_SettingsCard_HeaderIcon;
                xamlMember.Setter = set_83_SettingsCard_HeaderIcon;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.ActionIcon":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ActionIcon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_SettingsCard_ActionIcon;
                xamlMember.Setter = set_84_SettingsCard_ActionIcon;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.ActionIconToolTip":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ActionIconToolTip", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_SettingsCard_ActionIconToolTip;
                xamlMember.Setter = set_85_SettingsCard_ActionIconToolTip;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.IsClickEnabled":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsClickEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_SettingsCard_IsClickEnabled;
                xamlMember.Setter = set_86_SettingsCard_IsClickEnabled;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.ContentAlignment":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ContentAlignment", "CommunityToolkit.WinUI.Controls.ContentAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_SettingsCard_ContentAlignment;
                xamlMember.Setter = set_87_SettingsCard_ContentAlignment;
                break;
            case "CommunityToolkit.WinUI.Controls.SettingsCard.IsActionIconVisible":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SettingsCard");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsActionIconVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_SettingsCard_IsActionIconVisible;
                xamlMember.Setter = set_88_SettingsCard_IsActionIconVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Content":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_InfoBar_Content;
                xamlMember.Setter = set_89_InfoBar_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsOpen":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_InfoBar_IsOpen;
                xamlMember.Setter = set_90_InfoBar_IsOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Severity":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Severity", "Microsoft.UI.Xaml.Controls.InfoBarSeverity");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_InfoBar_Severity;
                xamlMember.Setter = set_91_InfoBar_Severity;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.ActionButton":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ActionButton", "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_InfoBar_ActionButton;
                xamlMember.Setter = set_92_InfoBar_ActionButton;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommand":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "CloseButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_InfoBar_CloseButtonCommand;
                xamlMember.Setter = set_93_InfoBar_CloseButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommandParameter":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "CloseButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_InfoBar_CloseButtonCommandParameter;
                xamlMember.Setter = set_94_InfoBar_CloseButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonStyle":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "CloseButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_InfoBar_CloseButtonStyle;
                xamlMember.Setter = set_95_InfoBar_CloseButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.ContentTemplate":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ContentTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_InfoBar_ContentTemplate;
                xamlMember.Setter = set_96_InfoBar_ContentTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IconSource":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_InfoBar_IconSource;
                xamlMember.Setter = set_97_InfoBar_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsClosable":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsClosable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_InfoBar_IsClosable;
                xamlMember.Setter = set_98_InfoBar_IsClosable;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsIconVisible":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsIconVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_InfoBar_IsIconVisible;
                xamlMember.Setter = set_99_InfoBar_IsIconVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Message":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Message", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_InfoBar_Message;
                xamlMember.Setter = set_100_InfoBar_Message;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.TemplateSettings":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_InfoBar_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Title":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_InfoBar_Title;
                xamlMember.Setter = set_102_InfoBar_Title;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.IsExpanded":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_Expander_IsExpanded;
                xamlMember.Setter = set_103_Expander_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.Header":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_Expander_Header;
                xamlMember.Setter = set_104_Expander_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.ExpandDirection":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ExpandDirection", "Microsoft.UI.Xaml.Controls.ExpandDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_Expander_ExpandDirection;
                xamlMember.Setter = set_105_Expander_ExpandDirection;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.HeaderTemplate":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_Expander_HeaderTemplate;
                xamlMember.Setter = set_106_Expander_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.HeaderTemplateSelector":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HeaderTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_Expander_HeaderTemplateSelector;
                xamlMember.Setter = set_107_Expander_HeaderTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.TemplateSettings":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings");
                xamlMember.Getter = get_108_Expander_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.FontIconExtension.Glyph":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.FontIconExtension");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Glyph", "String");
                xamlMember.Getter = get_109_FontIconExtension_Glyph;
                xamlMember.Setter = set_109_FontIconExtension_Glyph;
                break;
            case "CommunityToolkit.WinUI.FontIconExtension.FontFamily":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.FontIconExtension");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "FontFamily", "Microsoft.UI.Xaml.Media.FontFamily");
                xamlMember.Getter = get_110_FontIconExtension_FontFamily;
                xamlMember.Setter = set_110_FontIconExtension_FontFamily;
                break;
            case "CommunityToolkit.WinUI.TextIconExtension.FontSize":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.TextIconExtension");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.Getter = get_111_TextIconExtension_FontSize;
                xamlMember.Setter = set_111_TextIconExtension_FontSize;
                break;
            case "CommunityToolkit.WinUI.TextIconExtension.FontWeight":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.TextIconExtension");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.Getter = get_112_TextIconExtension_FontWeight;
                xamlMember.Setter = set_112_TextIconExtension_FontWeight;
                break;
            case "CommunityToolkit.WinUI.TextIconExtension.FontStyle":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.TextIconExtension");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.Getter = get_113_TextIconExtension_FontStyle;
                xamlMember.Setter = set_113_TextIconExtension_FontStyle;
                break;
            case "CommunityToolkit.WinUI.TextIconExtension.Foreground":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.TextIconExtension");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Foreground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_114_TextIconExtension_Foreground;
                xamlMember.Setter = set_114_TextIconExtension_Foreground;
                break;
            case "CommunityToolkit.WinUI.TextIconExtension.IsTextScaleFactorEnabled":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.TextIconExtension");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsTextScaleFactorEnabled", "Boolean");
                xamlMember.Getter = get_115_TextIconExtension_IsTextScaleFactorEnabled;
                xamlMember.Setter = set_115_TextIconExtension_IsTextScaleFactorEnabled;
                break;
            case "CommunityToolkit.WinUI.TextIconExtension.MirroredWhenRightToLeft":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.TextIconExtension");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MirroredWhenRightToLeft", "Boolean");
                xamlMember.Getter = get_116_TextIconExtension_MirroredWhenRightToLeft;
                xamlMember.Setter = set_116_TextIconExtension_MirroredWhenRightToLeft;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.Items":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_RadioButtons_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.SelectedIndex":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_RadioButtons_SelectedIndex;
                xamlMember.Setter = set_118_RadioButtons_SelectedIndex;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.Header":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_RadioButtons_Header;
                xamlMember.Setter = set_119_RadioButtons_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.HeaderTemplate":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_RadioButtons_HeaderTemplate;
                xamlMember.Setter = set_120_RadioButtons_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.ItemTemplate":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_RadioButtons_ItemTemplate;
                xamlMember.Setter = set_121_RadioButtons_ItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.ItemsSource":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_RadioButtons_ItemsSource;
                xamlMember.Setter = set_122_RadioButtons_ItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.MaxColumns":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MaxColumns", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_RadioButtons_MaxColumns;
                xamlMember.Setter = set_123_RadioButtons_MaxColumns;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.SelectedItem":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_RadioButtons_SelectedItem;
                xamlMember.Setter = set_124_RadioButtons_SelectedItem;
                break;
            case "Microsoft.UI.Xaml.Controls.LinedFlowLayout.ItemsStretch":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.LinedFlowLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemsStretch", "Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsStretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_LinedFlowLayout_ItemsStretch;
                xamlMember.Setter = set_125_LinedFlowLayout_ItemsStretch;
                break;
            case "Microsoft.UI.Xaml.Controls.LinedFlowLayout.MinItemSpacing":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.LinedFlowLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MinItemSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_LinedFlowLayout_MinItemSpacing;
                xamlMember.Setter = set_126_LinedFlowLayout_MinItemSpacing;
                break;
            case "Microsoft.UI.Xaml.Controls.LinedFlowLayout.ActualLineHeight":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.LinedFlowLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ActualLineHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_LinedFlowLayout_ActualLineHeight;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.LinedFlowLayout.ItemsJustification":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.LinedFlowLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemsJustification", "Microsoft.UI.Xaml.Controls.LinedFlowLayoutItemsJustification");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_LinedFlowLayout_ItemsJustification;
                xamlMember.Setter = set_128_LinedFlowLayout_ItemsJustification;
                break;
            case "Microsoft.UI.Xaml.Controls.LinedFlowLayout.LineHeight":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.LinedFlowLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "LineHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_LinedFlowLayout_LineHeight;
                xamlMember.Setter = set_129_LinedFlowLayout_LineHeight;
                break;
            case "Microsoft.UI.Xaml.Controls.LinedFlowLayout.LineSpacing":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.LinedFlowLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "LineSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_LinedFlowLayout_LineSpacing;
                xamlMember.Setter = set_130_LinedFlowLayout_LineSpacing;
                break;
            case "Microsoft.UI.Xaml.Controls.LinedFlowLayout.RequestedRangeLength":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.LinedFlowLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "RequestedRangeLength", "Int32");
                xamlMember.Getter = get_131_LinedFlowLayout_RequestedRangeLength;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.LinedFlowLayout.RequestedRangeStartIndex":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.LinedFlowLayout");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "RequestedRangeStartIndex", "Int32");
                xamlMember.Getter = get_132_LinedFlowLayout_RequestedRangeStartIndex;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneDisplayMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "PaneDisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_NavigationView_PaneDisplayMode;
                xamlMember.Setter = set_133_NavigationView_PaneDisplayMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.Header":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_NavigationView_Header;
                xamlMember.Setter = set_134_NavigationView_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItems":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_NavigationView_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AlwaysShowHeader":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "AlwaysShowHeader", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_NavigationView_AlwaysShowHeader;
                xamlMember.Setter = set_136_NavigationView_AlwaysShowHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AutoSuggestBox":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "AutoSuggestBox", "Microsoft.UI.Xaml.Controls.AutoSuggestBox");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_NavigationView_AutoSuggestBox;
                xamlMember.Setter = set_137_NavigationView_AutoSuggestBox;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactModeThresholdWidth":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "CompactModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_NavigationView_CompactModeThresholdWidth;
                xamlMember.Setter = set_138_NavigationView_CompactModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactPaneLength":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_NavigationView_CompactPaneLength;
                xamlMember.Setter = set_139_NavigationView_CompactPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ContentOverlay":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ContentOverlay", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_NavigationView_ContentOverlay;
                xamlMember.Setter = set_140_NavigationView_ContentOverlay;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.DisplayMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "DisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_NavigationView_DisplayMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ExpandedModeThresholdWidth":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ExpandedModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_NavigationView_ExpandedModeThresholdWidth;
                xamlMember.Setter = set_142_NavigationView_ExpandedModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItems":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "FooterMenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_NavigationView_FooterMenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsSource":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "FooterMenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_NavigationView_FooterMenuItemsSource;
                xamlMember.Setter = set_144_NavigationView_FooterMenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.HeaderTemplate":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_NavigationView_HeaderTemplate;
                xamlMember.Setter = set_145_NavigationView_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackButtonVisible":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsBackButtonVisible", "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_146_NavigationView_IsBackButtonVisible;
                xamlMember.Setter = set_146_NavigationView_IsBackButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackEnabled":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsBackEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_147_NavigationView_IsBackEnabled;
                xamlMember.Setter = set_147_NavigationView_IsBackEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneOpen":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsPaneOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_148_NavigationView_IsPaneOpen;
                xamlMember.Setter = set_148_NavigationView_IsPaneOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneToggleButtonVisible":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsPaneToggleButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_149_NavigationView_IsPaneToggleButtonVisible;
                xamlMember.Setter = set_149_NavigationView_IsPaneToggleButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneVisible":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsPaneVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_150_NavigationView_IsPaneVisible;
                xamlMember.Setter = set_150_NavigationView_IsPaneVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsSettingsVisible":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsSettingsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_151_NavigationView_IsSettingsVisible;
                xamlMember.Setter = set_151_NavigationView_IsSettingsVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsTitleBarAutoPaddingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_152_NavigationView_IsTitleBarAutoPaddingEnabled;
                xamlMember.Setter = set_152_NavigationView_IsTitleBarAutoPaddingEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyle":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_153_NavigationView_MenuItemContainerStyle;
                xamlMember.Setter = set_153_NavigationView_MenuItemContainerStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleSelector":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyleSelector", "Microsoft.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_154_NavigationView_MenuItemContainerStyleSelector;
                xamlMember.Setter = set_154_NavigationView_MenuItemContainerStyleSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplate":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MenuItemTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_155_NavigationView_MenuItemTemplate;
                xamlMember.Setter = set_155_NavigationView_MenuItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateSelector":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MenuItemTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_156_NavigationView_MenuItemTemplateSelector;
                xamlMember.Setter = set_156_NavigationView_MenuItemTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsSource":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_157_NavigationView_MenuItemsSource;
                xamlMember.Setter = set_157_NavigationView_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OpenPaneLength":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "OpenPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_158_NavigationView_OpenPaneLength;
                xamlMember.Setter = set_158_NavigationView_OpenPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OverflowLabelMode":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "OverflowLabelMode", "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_159_NavigationView_OverflowLabelMode;
                xamlMember.Setter = set_159_NavigationView_OverflowLabelMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneCustomContent":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "PaneCustomContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_160_NavigationView_PaneCustomContent;
                xamlMember.Setter = set_160_NavigationView_PaneCustomContent;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneFooter":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "PaneFooter", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_161_NavigationView_PaneFooter;
                xamlMember.Setter = set_161_NavigationView_PaneFooter;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneHeader":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "PaneHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_162_NavigationView_PaneHeader;
                xamlMember.Setter = set_162_NavigationView_PaneHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneTitle":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "PaneTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_163_NavigationView_PaneTitle;
                xamlMember.Setter = set_163_NavigationView_PaneTitle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneToggleButtonStyle":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "PaneToggleButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_164_NavigationView_PaneToggleButtonStyle;
                xamlMember.Setter = set_164_NavigationView_PaneToggleButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectedItem":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_165_NavigationView_SelectedItem;
                xamlMember.Setter = set_165_NavigationView_SelectedItem;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectionFollowsFocus":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "SelectionFollowsFocus", "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_166_NavigationView_SelectionFollowsFocus;
                xamlMember.Setter = set_166_NavigationView_SelectionFollowsFocus;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SettingsItem":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "SettingsItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_167_NavigationView_SettingsItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ShoulderNavigationEnabled":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ShoulderNavigationEnabled", "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_168_NavigationView_ShoulderNavigationEnabled;
                xamlMember.Setter = set_168_NavigationView_ShoulderNavigationEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.TemplateSettings":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_169_NavigationView_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.BreadcrumbBar.ItemsSource":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.BreadcrumbBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_170_BreadcrumbBar_ItemsSource;
                xamlMember.Setter = set_170_BreadcrumbBar_ItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.BreadcrumbBar.ItemTemplate":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.BreadcrumbBar");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_171_BreadcrumbBar_ItemTemplate;
                xamlMember.Setter = set_171_BreadcrumbBar_ItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.Icon":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_172_NavigationViewItem_Icon;
                xamlMember.Setter = set_172_NavigationViewItem_Icon;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.SelectsOnInvoked":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "SelectsOnInvoked", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_173_NavigationViewItem_SelectsOnInvoked;
                xamlMember.Setter = set_173_NavigationViewItem_SelectsOnInvoked;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItems":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_NavigationViewItem_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.CompactPaneLength":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_NavigationViewItem_CompactPaneLength;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.HasUnrealizedChildren":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_NavigationViewItem_HasUnrealizedChildren;
                xamlMember.Setter = set_176_NavigationViewItem_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.InfoBadge":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "InfoBadge", "Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_NavigationViewItem_InfoBadge;
                xamlMember.Setter = set_177_NavigationViewItem_InfoBadge;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsChildSelected":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsChildSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_NavigationViewItem_IsChildSelected;
                xamlMember.Setter = set_178_NavigationViewItem_IsChildSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsExpanded":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_179_NavigationViewItem_IsExpanded;
                xamlMember.Setter = set_179_NavigationViewItem_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItemsSource":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_180_NavigationViewItem_MenuItemsSource;
                xamlMember.Setter = set_180_NavigationViewItem_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelected":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_181_NavigationViewItemBase_IsSelected;
                xamlMember.Setter = set_181_NavigationViewItemBase_IsSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Children":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>");
                xamlMember.Getter = get_182_TreeViewNode_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Content":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_183_TreeViewNode_Content;
                xamlMember.Setter = set_183_TreeViewNode_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Depth":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_184_TreeViewNode_Depth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_185_TreeViewNode_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.Getter = get_186_TreeViewNode_HasUnrealizedChildren;
                xamlMember.Setter = set_186_TreeViewNode_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_187_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_187_TreeViewNode_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Parent":
                userType = (global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlMember(this, "Parent", "Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember.Getter = get_188_TreeViewNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, 
            global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void StaticInitializer();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlUserType : global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, 
            global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            StaticInitializer();
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return global::System.Convert.ChangeType(value, global::System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public StaticInitializer StaticInitializer { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2503")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Fluent_Launcher.Fluent_Launcher_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

